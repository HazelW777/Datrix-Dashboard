"use client";

import React, {
  useState,
  useRef,
  useCallback,
  useEffect,
  Suspense,
} from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  Database,
  Table as TableIcon,
  Columns,
  Play,
  Save,
  Undo,
  Redo,
  Download,
  Search,
  Filter,
  BarChart3,
  LineChart,
  PieChart,
  Settings,
  Plus,
  Trash2,
  ArrowRight,
  ChevronDown,
  ChevronRight,
  GripVertical,
  Workflow,
  TestTube,
  Wrench,
  Layers,
  Zap,
  GitBranch,
  Copy,
  X,
  Home,
  Activity,
  Combine,
  Edit,
  Eye,
  Check,
} from "lucide-react";
import { useSearchParams, useRouter } from "next/navigation";
import { realEcommerceDataset, generateRealSampleData } from "@/lib/dataParser";

interface DatasetColumn {
  name: string;
  type: string;
  nonNull: boolean;
  description: string;
}

interface DatasetTable {
  name: string;
  columns: DatasetColumn[];
  rows: number;
}

interface DatasetStructure {
  name: string;
  tables: DatasetTable[];
}

// Only real dataset - no mock data
const datasetStructure: DatasetStructure = realEcommerceDataset;

// Primary operations
const primaryOperations = [
  {
    id: "cleaning",
    name: "Cleaning",
    icon: TestTube,
    color: "bg-red-500",
    description: "Clean and prepare your data",
  },
  {
    id: "modeling",
    name: "Modeling",
    icon: BarChart3,
    color: "bg-purple-500",
    description: "Build and train machine learning models",
  },
  {
    id: "column_row_operation",
    name: "Column / Row Operation",
    icon: Columns,
    color: "bg-green-500",
    description: "Manipulate columns and rows",
  },
  {
    id: "transformation",
    name: "Transformation",
    icon: Layers,
    color: "bg-orange-500",
    description: "Transform and reshape data",
  },
  {
    id: "lambda_operation",
    name: "Lambda or Column Operation",
    icon: Zap,
    color: "bg-yellow-500",
    description: "Apply custom operations and calculations",
  },
];

// Secondary operations for each primary operation (shown in properties panel)
const secondaryOperations = {
  cleaning: [
    {
      id: "missing_values",
      name: "Missing values",
      description: "Remove null, NaN, or invalid values",
    },
    {
      id: "type_conversion",
      name: "Type conversion",
      description: "Convert column data types",
    },
    {
      id: "outlier_removal",
      name: "Outlier removal",
      description: "Detect and remove statistical outliers",
    },
  ],
  modeling: [
    {
      id: "feature_engineering",
      name: "Feature engineering",
      description: "Create new features from existing data",
    },
    {
      id: "variable_selection",
      name: "Variable selection",
      description: "Select most important variables",
    },
    {
      id: "train_test_split",
      name: "Training/test data split",
      description: "Split data for model training",
    },
    {
      id: "choose_model",
      name: "Choose model",
      description: "Select machine learning algorithm",
    },
    { id: "train", name: "Train", description: "Train the selected model" },
    {
      id: "model_evaluation",
      name: "Model evaluation",
      description: "Evaluate model performance",
    },
  ],
  column_row_operation: {
    column: [
      {
        id: "combine_column",
        name: "Combine Columns",
        description: "Combine multiple columns into one",
      },
      {
        id: "split_column",
        name: "Split Column",
        description: "Split one column into multiple",
      },
      {
        id: "remove_column",
        name: "Remove Column",
        description: "Remove columns from dataset",
      },
      {
        id: "rename_column",
        name: "Rename Column",
        description: "Rename existing columns",
      },
    ],
    row: [
      {
        id: "filter_rows",
        name: "Filter Rows",
        description: "Filter rows based on conditions",
      },
      {
        id: "sort_rows",
        name: "Sort Rows",
        description: "Sort rows by column values",
      },
    ],
  },
  transformation: [
    {
      id: "group_by",
      name: "Group By",
      description: "Group and aggregate data",
    },
    { id: "join", name: "Join/Merge", description: "Join multiple datasets" },
    { id: "pivot", name: "Pivot", description: "Create pivot tables" },
  ],
  lambda_operation: [
    { id: "add", name: "Add", description: "Add columns or values" },
    {
      id: "conditional",
      name: "If-Then",
      description: "Conditional operations",
    },
    {
      id: "custom_function",
      name: "Custom Function",
      description: "Apply custom functions",
    },
  ],
};

interface WorkflowNode {
  id: string;
  type: "table" | "operation";
  name: string;
  data?: any;
  status: "idle" | "running" | "completed" | "error";
  config?: Record<string, any>;
  operationType?: string; // Primary operation type
  secondaryOperation?: string; // Secondary operation
  tableId?: string; // Which table workflow this node belongs to
  position: { x: number; y: number }; // Node position for absolute positioning
}

interface TableWorkflow {
  id: string;
  tableName: string;
  tableData: DatasetTable;
  nodes: WorkflowNode[];
  addedAt: number; // Timestamp for ordering
}

// AI-generated cleaning tasks for real e-commerce tables
const generateCleaningTasks = (tableName: string) => {
  if (tableName === "Amazon Sale Report") {
    return [
      {
        id: "task-1",
        column: "Date",
        description: "Standardize date format",
        detail:
          "Found inconsistent date formats: some entries use MM-DD-YY while others may have different formats. Need to ensure consistent parsing for time-series analysis.",
        action: "fix_format",
        aiRecommendedValue: "Convert to YYYY-MM-DD format",
        userValue: "Convert to YYYY-MM-DD format",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Convert to YYYY-MM-DD format",
          "Convert to DD-MM-YYYY format",
          "Keep original MM-DD-YY format",
          "Parse automatically",
        ],
        isEditing: false,
        status: "pending",
        priority: "high",
        impact: "Critical for sales trend analysis and revenue forecasting",
      },
      {
        id: "task-2",
        column: "Status",
        description: "Standardize order status values",
        detail:
          "Found inconsistent status values: 'Shipped - Delivered to Buyer' vs 'Shipped', 'Cancelled' variations. This affects sales completion rate analysis.",
        action: "standardize_values",
        aiRecommendedValue: "Shipped|Cancelled|Pending|Returned",
        userValue: "Shipped|Cancelled|Pending|Returned",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Shipped|Cancelled|Pending|Returned",
          "Custom mapping with subcategories",
          "Keep original detailed statuses",
        ],
        isEditing: false,
        status: "pending",
        priority: "high",
        impact:
          "Essential for order fulfillment and customer satisfaction analysis",
      },
      {
        id: "task-3",
        column: "Amount",
        description: "Handle zero and negative amount transactions",
        detail:
          "Found 1,250 transactions with 0.00 amount and 45 with negative amounts. These are typically cancelled orders, returns, or refunds that need special handling.",
        action: "fix_values",
        aiRecommendedValue:
          "Keep 0.00 for cancelled orders, flag negatives as returns",
        userValue: "Keep 0.00 for cancelled orders, flag negatives as returns",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Keep 0.00 for cancelled orders, flag negatives as returns",
          "Remove all zero/negative amount rows",
          "Set all to positive values",
          "Create separate return/refund indicators",
        ],
        isEditing: false,
        status: "pending",
        priority: "high",
        impact:
          "Critical for accurate revenue calculations and financial reporting",
      },
      {
        id: "task-4",
        column: "ship-postal-code",
        description: "Clean postal code formatting",
        detail:
          "Found 2,340 postal codes with decimal points (e.g., '400081.0') and inconsistent formatting. Need standardization for geographic analysis.",
        action: "fix_format",
        aiRecommendedValue:
          "Remove decimal points and standardize to 6-digit format",
        userValue: "Remove decimal points and standardize to 6-digit format",
        needsValue: false,
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact: "Important for delivery analysis and regional sales insights",
      },
      {
        id: "task-5",
        column: "SKU",
        description: "Clean SKU formatting and remove whitespace",
        detail:
          "Found 456 SKU entries with leading/trailing whitespace and inconsistent casing. Clean SKUs are essential for inventory tracking.",
        action: "trim_whitespace",
        aiRecommendedValue: "Trim whitespace and standardize to uppercase",
        userValue: "Trim whitespace and standardize to uppercase",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Trim whitespace and standardize to uppercase",
          "Trim whitespace only",
          "Standardize format to STYLE-COLOR-SIZE pattern",
        ],
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact:
          "Essential for accurate inventory management and product analysis",
      },
      {
        id: "task-6",
        column: "Qty",
        description: "Validate quantity values",
        detail:
          "Found 23 orders with quantity = 0 and 8 with unusually high quantities (>50). Need to validate for data quality.",
        action: "fix_values",
        aiRecommendedValue:
          "Flag zero quantities, cap maximum at reasonable limit",
        userValue: "Flag zero quantities, cap maximum at reasonable limit",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Flag zero quantities, cap maximum at reasonable limit",
          "Remove rows with zero quantity",
          "Keep all values as-is",
          "Set minimum quantity to 1",
        ],
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact: "Important for accurate sales volume and inventory analysis",
      },
      {
        id: "task-7",
        column: "ship-city",
        description: "Standardize city names",
        detail:
          "Found city name inconsistencies: 'MUMBAI' vs 'Mumbai', 'BENGALURU' vs 'Bangalore'. Need standardization for geographic analysis.",
        action: "standardize_values",
        aiRecommendedValue: "Use official city names in uppercase",
        userValue: "Use official city names in uppercase",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Use official city names in uppercase",
          "Use title case format",
          "Create city mapping table",
          "Keep original formatting",
        ],
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact:
          "Important for regional sales analysis and logistics optimization",
      },
      {
        id: "task-8",
        column: "ASIN",
        description: "Handle missing ASIN values",
        detail:
          "Found 1,840 missing ASIN values. ASIN is crucial for Amazon product identification and cross-platform analysis.",
        action: "replace_missing",
        aiRecommendedValue: "Generate placeholder or flag as 'NON-AMAZON'",
        userValue: "Generate placeholder or flag as 'NON-AMAZON'",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Generate placeholder or flag as 'NON-AMAZON'",
          "Remove rows with missing ASIN",
          "Attempt to derive from SKU pattern",
          "Leave as null for analysis",
        ],
        isEditing: false,
        status: "pending",
        priority: "low",
        impact: "Useful for Amazon-specific product performance analysis",
      },
      {
        id: "task-9",
        column: "Category",
        description: "Standardize product categories",
        detail:
          "Found category name variations: 'Set' vs 'set', 'kurta' vs 'Kurta', 'Western Dress' formatting inconsistencies.",
        action: "standardize_values",
        aiRecommendedValue: "Use title case with consistent naming",
        userValue: "Use title case with consistent naming",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Use title case with consistent naming",
          "Create category hierarchy mapping",
          "Standardize to predefined category list",
          "Keep original formatting",
        ],
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact: "Critical for product category analysis and business insights",
      },
      {
        id: "task-10",
        column: "",
        description: "Remove duplicate orders",
        detail:
          "Found 156 completely duplicate order entries (same Order ID, Date, SKU, Amount). These duplicates skew sales metrics.",
        action: "remove_duplicates",
        aiRecommendedValue:
          "Remove duplicates based on Order ID + SKU combination",
        userValue: "Remove duplicates based on Order ID + SKU combination",
        needsValue: false,
        isEditing: false,
        status: "pending",
        priority: "high",
        impact: "Critical for accurate sales volume and revenue calculations",
      },
      {
        id: "task-11",
        column: "ship-service-level",
        description: "Handle missing shipping service levels",
        detail:
          "Found 3,240 missing shipping service level values. This affects shipping cost analysis and customer satisfaction metrics.",
        action: "replace_missing",
        aiRecommendedValue: "Fill with 'Standard' as default",
        userValue: "Fill with 'Standard' as default",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Fill with 'Standard' as default",
          "Derive from order amount (high amount = Expedited)",
          "Remove rows with missing values",
          "Create 'Unknown' category",
        ],
        isEditing: false,
        status: "pending",
        priority: "low",
        impact:
          "Useful for shipping cost analysis and delivery performance metrics",
      },
      {
        id: "task-12",
        column: "B2B",
        description: "Standardize B2B indicator values",
        detail:
          "Found inconsistent B2B values: 'True'/'False', 'true'/'false', empty values. Need standardization for business customer analysis.",
        action: "standardize_values",
        aiRecommendedValue:
          "Convert to boolean True/False, treat empty as False",
        userValue: "Convert to boolean True/False, treat empty as False",
        needsValue: true,
        valueType: "dropdown",
        options: [
          "Convert to boolean True/False, treat empty as False",
          "Use 1/0 numeric format",
          "Use 'B2B'/'B2C' text format",
          "Keep original mixed format",
        ],
        isEditing: false,
        status: "pending",
        priority: "medium",
        impact: "Important for customer segmentation and business analytics",
      },
    ];
  } else if (tableName === "Sale Report") {
    return [
      {
        id: "task-6",
        column: "Stock",
        description: "Handle negative stock values",
        detail: "Found 45 items with negative stock quantities",
        action: "fix_values",
        aiRecommendedValue: "Set to 0",
        userValue: "Set to 0",
        needsValue: true,
        valueType: "dropdown",
        options: ["Set to 0", "Remove rows", "Flag for review"],
        isEditing: false,
        status: "pending",
      },
      {
        id: "task-7",
        column: "Category",
        description: "Standardize category names",
        detail:
          "Found inconsistent category formats: 'AN : LEGGINGS' vs 'AN: LEGGINGS'",
        action: "standardize_values",
        aiRecommendedValue: "Use consistent format with space",
        userValue: "Use consistent format with space",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
    ];
  } else if (tableName === "International Sale Report") {
    return [
      {
        id: "task-8",
        column: "CUSTOMER",
        description: "Standardize customer name format",
        detail: "Found mixed case formats in customer names",
        action: "normalize_text",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
      {
        id: "task-9",
        column: "RATE",
        description: "Validate price consistency",
        detail:
          "Found 12 entries where RATE and GROSS AMT don't match expected calculations",
        action: "fix_values",
        aiRecommendedValue: "Recalculate based on PCS * RATE",
        userValue: "Recalculate based on PCS * RATE",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
    ];
  } else if (
    tableName === "P&L March 2021" ||
    tableName === "May 2022 Pricing"
  ) {
    return [
      {
        id: "task-10",
        column: "Weight",
        description: "Standardize weight units",
        detail:
          "All weights appear to be in kg, but some entries might need validation",
        action: "fix_format",
        aiRecommendedValue: "Ensure 2 decimal places",
        userValue: "Ensure 2 decimal places",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
      {
        id: "task-11",
        column: "Category",
        description: "Normalize category names",
        detail: "Found mixed case in category names (Kurta vs kurta)",
        action: "normalize_text",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
    ];
  } else if (tableName === "Expense Report") {
    return [
      {
        id: "task-12",
        column: "Expance",
        description: "Fix spelling: Expance → Expense",
        detail: "Column name contains spelling error",
        action: "fix_format",
        aiRecommendedValue: "Rename to 'Expense'",
        userValue: "Rename to 'Expense'",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
    ];
  } else if (tableName === "Cloud Warehouse Comparison") {
    return [
      {
        id: "task-13",
        column: "INCREFF",
        description: "Standardize price format",
        detail: "Mixed formats: '4', 'Rs 0.15/- Per Day'",
        action: "standardize_values",
        aiRecommendedValue: "Extract numeric values",
        userValue: "Extract numeric values",
        needsValue: false,
        isEditing: false,
        status: "pending",
      },
    ];
  }
  return [];
};

function WorkflowContent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const isNewDataset = searchParams.get("new") === "true";

  const [tableWorkflows, setTableWorkflows] = useState<TableWorkflow[]>([]);
  const [selectedNode, setSelectedNode] = useState<string | null>(null);
  const [results, setResults] = useState<any>(null);
  const [showPropertiesPanel, setShowPropertiesPanel] = useState(false);
  const [showAddNodeDialog, setShowAddNodeDialog] = useState(false);
  const [addNodeAfter, setAddNodeAfter] = useState<string | null>(null);
  const [currentTableId, setCurrentTableId] = useState<string | null>(null);
  const [collapsedTasks, setCollapsedTasks] = useState<Record<string, boolean>>(
    {}
  );
  const [cleaningTasks, setCleaningTasks] = useState<Record<string, any[]>>({});
  const [collapsedSections, setCollapsedSections] = useState<
    Record<string, boolean>
  >({});
  const [collapsedCategories, setCollapsedCategories] = useState<
    Record<string, boolean>
  >({});
  const [showAddTaskDialog, setShowAddTaskDialog] = useState(false);
  const [addTaskCategory, setAddTaskCategory] = useState<string>("");
  const [newTaskColumn, setNewTaskColumn] = useState<string>("");
  const [newTaskDescription, setNewTaskDescription] = useState<string>("");
  const [currentNodeId, setCurrentNodeId] = useState<string>("");
  const [activeResultsTab, setActiveResultsTab] = useState("output");
  // 添加查看任务状态管理
  const [viewedTasks, setViewedTasks] = useState<Record<string, boolean>>({});
  // 添加每个节点的数据表状态管理
  const [nodeDataTables, setNodeDataTables] = useState<Record<string, any[]>>(
    {}
  );
  // 添加column/row operation的配置状态
  const [columnRowConfig, setColumnRowConfig] = useState<
    Record<
      string,
      {
        activeTab: "column" | "row";
        selectedColumns: string[];
        selectedRows: number[];
        operationType: string;
        filterConditions: Array<{
          column: string;
          operator: string;
          value: string;
        }>;
        sortColumns: Array<{
          column: string;
          direction: "asc" | "desc";
        }>;
        newColumnName?: string;
        newColumnType?: string;
        combineColumns?: string[];
        combineSeparator?: string;
        splitColumn?: string;
        splitNewColumns?: string[];
      }
    >
  >({});

  // Modeling configuration states
  const [modelingConfig, setModelingConfig] = useState<
    Record<
      string,
      {
        target: string;
        preferences: {
          accuracyVsRobustness: string;
          complexityVsSimplicity: string;
          speedVsAccuracy: string;
        };
        recommendedModel: string;
        modelParameters: Record<string, any>;
        features: string[];
      }
    >
  >({});

  // Transformation configuration states
  const [transformationConfig, setTransformationConfig] = useState<
    Record<
      string,
      {
        operationType: string;
        groupByColumns: string[];
        aggregations: Array<{
          column: string;
          function: "sum" | "avg" | "count" | "min" | "max" | "first" | "last";
          alias?: string;
        }>;
        joinType?: "inner" | "left" | "right" | "outer";
        joinColumn?: string;
        pivotColumn?: string;
        valueColumn?: string;
        pivotValues?: string[];
      }
    >
  >({});

  const dataset = datasetStructure;

  // Constants for layout - adjusted height for better aesthetics
  const NODE_WIDTH = 200;
  const NODE_HEIGHT = 60; // Reduced height for better aesthetics
  const HORIZONTAL_SPACING = 60;
  const VERTICAL_SPACING = 150;
  const ROW_HEIGHT = 200;

  // Add table to workflow - creates a new workflow row
  const addTableToWorkflow = (table: DatasetTable) => {
    // Check if table already exists
    const existingWorkflow = tableWorkflows.find(
      (workflow) => workflow.tableName === table.name
    );

    if (existingWorkflow) {
      return; // Don't add duplicate tables
    }

    const tableId = `table-workflow-${Date.now()}`;
    const rowIndex = tableWorkflows.length;

    const tableNode: WorkflowNode = {
      id: `${tableId}-table`,
      type: "table",
      name: table.name,
      data: table,
      status: "completed",
      config: {},
      tableId,
      position: { x: 50, y: 50 + rowIndex * ROW_HEIGHT },
    };

    const newWorkflow: TableWorkflow = {
      id: tableId,
      tableName: table.name,
      tableData: table,
      nodes: [tableNode],
      addedAt: Date.now(),
    };

    setTableWorkflows((prev) => [...prev, newWorkflow]);

    // 初始化表格节点的数据表（使用原始数据）
    const initialData = generateMockTableDataFromReal(table);
    setNodeDataTables((prev) => ({
      ...prev,
      [tableNode.id]: initialData,
    }));

    // Show table content in results
    showTableContent(table, tableNode.id);
  };

  // Generate mock table data
  const generateMockTableDataFromReal = (table: DatasetTable) => {
    // Use the real data generator from dataParser
    return generateRealSampleData(table, 50);
  };

  // Show table content in results
  const showTableContent = (table: DatasetTable, nodeId?: string) => {
    let mockData: any[] = [];
    let summary = "";

    if (nodeId) {
      // 如果指定了节点ID，显示该节点处理后的数据
      mockData = getCurrentNodeDataTable(nodeId);
      const node = getAllNodes().find((n) => n.id === nodeId);
      summary = `Showing processed data from ${node?.name || table.name} (${
        mockData.length
      } of ${table.rows.toLocaleString()} total rows)`;
    } else {
      // 否则显示原始数据
      mockData = generateMockTableDataFromReal(table);
      summary = `Showing sample data from ${table.name} table (${
        mockData.length
      } of ${table.rows.toLocaleString()} total rows)`;
    }

    setResults({
      type: "table_content",
      summary: summary,
      data: mockData,
      table: {
        name: table.name,
        totalRows: table.rows,
        columns: table.columns,
        sampleSize: mockData.length,
      },
    });
  };

  // Handle clicking on dataset table cards
  const handleTableCardClick = (table: DatasetTable) => {
    // Show table content immediately
    showTableContent(table);

    // Also add to workflow
    addTableToWorkflow(table);
  };

  // Add operation node after specified node
  const addOperationNode = (operation: any, afterNodeId: string) => {
    setTableWorkflows((prev) => {
      return prev.map((workflow) => {
        const afterNodeIndex = workflow.nodes.findIndex(
          (node) => node.id === afterNodeId
        );
        if (afterNodeIndex === -1) return workflow;

        const afterNode = workflow.nodes[afterNodeIndex];
        const newNode: WorkflowNode = {
          id: `${workflow.id}-operation-${Date.now()}`,
          type: "operation",
          name: operation.name,
          data: operation,
          status: "idle",
          config: {},
          operationType: operation.id,
          tableId: workflow.id,
          position: {
            x: afterNode.position.x + NODE_WIDTH + HORIZONTAL_SPACING,
            y: afterNode.position.y,
          },
        };

        const updatedNodes = [...workflow.nodes];
        updatedNodes.splice(afterNodeIndex + 1, 0, newNode);

        // Update positions of subsequent nodes
        for (let i = afterNodeIndex + 2; i < updatedNodes.length; i++) {
          updatedNodes[i].position.x =
            updatedNodes[i - 1].position.x + NODE_WIDTH + HORIZONTAL_SPACING;
        }

        return { ...workflow, nodes: updatedNodes };
      });
    });

    setShowAddNodeDialog(false);
    setAddNodeAfter(null);
    setCurrentTableId(null);
  };

  // Run node operation
  const runNode = (nodeId: string) => {
    setTableWorkflows((prev) => {
      return prev.map((workflow) => ({
        ...workflow,
        nodes: workflow.nodes.map((node) =>
          node.id === nodeId ? { ...node, status: "running" } : node
        ),
      }));
    });

    // Simulate operation
    setTimeout(() => {
      setTableWorkflows((prev) => {
        return prev.map((workflow) => ({
          ...workflow,
          nodes: workflow.nodes.map((node) =>
            node.id === nodeId ? { ...node, status: "completed" } : node
          ),
        }));
      });

      // Mock results
      setResults({
        nodeId,
        type: "table",
        data: [
          { id: 1, column1: "Value 1", column2: 42, column3: "Category A" },
          { id: 2, column1: "Value 2", column2: 35, column3: "Category B" },
          { id: 3, column1: "Value 3", column2: 78, column3: "Category A" },
        ],
        summary: "Operation completed successfully. 3 rows processed.",
      });
    }, 2000);
  };

  // Handle node selection and show properties
  const handleNodeClick = (nodeId: string) => {
    setSelectedNode(nodeId);
    const node = getAllNodes().find((n) => n.id === nodeId);
    if (node && node.type === "operation") {
      setShowPropertiesPanel(true);

      // Initialize cleaning tasks if this is a cleaning operation
      if (node.operationType === "cleaning") {
        const workflow = tableWorkflows.find((w) =>
          w.nodes.some((n) => n.id === nodeId)
        );
        if (workflow) {
          getCleaningTasksForNode(nodeId, workflow.tableName);
        }
      }

      // Initialize modeling config if this is a modeling operation
      if (node.operationType === "modeling") {
        initModelingConfig(nodeId);
      }

      // Initialize transformation config if this is a transformation operation
      if (node.operationType === "transformation") {
        initTransformationConfig(nodeId);
      }
    } else if (node && node.type === "table") {
      const workflow = tableWorkflows.find((w) => w.id === node.tableId);
      if (workflow) {
        // 显示该表格节点处理后的数据
        showTableContent(workflow.tableData, nodeId);
      }
      setShowPropertiesPanel(false);
      // when a table is clicked, we should see its content, so switch to output tab
      setActiveResultsTab("output");
    } else {
      setShowPropertiesPanel(false);
    }
  };

  // Update node configuration
  const updateNodeConfig = (nodeId: string, config: Record<string, any>) => {
    setTableWorkflows((prev) => {
      return prev.map((workflow) => ({
        ...workflow,
        nodes: workflow.nodes.map((node) =>
          node.id === nodeId
            ? { ...node, config: { ...node.config, ...config } }
            : node
        ),
      }));
    });
  };

  // Remove node
  const removeNode = (nodeId: string) => {
    setTableWorkflows((prev) => {
      return prev.map((workflow) => {
        const nodeIndex = workflow.nodes.findIndex(
          (node) => node.id === nodeId
        );
        if (nodeIndex === -1) return workflow;

        const updatedNodes = workflow.nodes.filter(
          (node) => node.id !== nodeId
        );

        // Update positions of subsequent nodes
        for (let i = nodeIndex; i < updatedNodes.length; i++) {
          if (i === 0) {
            updatedNodes[i].position.x = 50;
          } else {
            updatedNodes[i].position.x =
              updatedNodes[i - 1].position.x + NODE_WIDTH + HORIZONTAL_SPACING;
          }
        }

        return { ...workflow, nodes: updatedNodes };
      });
    });

    if (selectedNode === nodeId) {
      setSelectedNode(null);
      setShowPropertiesPanel(false);
    }
  };

  // Get all nodes from all workflows
  const getAllNodes = () => {
    return tableWorkflows.flatMap((workflow) => workflow.nodes);
  };

  // Get selected node
  const selectedNodeData = getAllNodes().find((n) => n.id === selectedNode);

  // Toggle collapsed state for sections
  const toggleCollapsed = (sectionId: string) => {
    setCollapsedSections((prev) => ({
      ...prev,
      [sectionId]: !prev[sectionId],
    }));
  };

  // Toggle collapsed state for cleaning tasks
  const toggleTaskCollapsed = (taskId: string) => {
    setCollapsedTasks((prev) => ({
      ...prev,
      [taskId]: !prev[taskId],
    }));
  };

  // Toggle collapsed state for cleaning task categories
  const toggleCategoryCollapsed = (categoryId: string) => {
    setCollapsedCategories((prev) => ({
      ...prev,
      [categoryId]: !prev[categoryId],
    }));
  };

  // Update task description
  const updateTaskDescription = (
    nodeId: string,
    taskId: string,
    description: string
  ) => {
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]:
        prev[nodeId]?.map((task) =>
          task.id === taskId ? { ...task, description } : task
        ) || [],
    }));
  };

  // Toggle task editing mode
  const toggleTaskEditing = (nodeId: string, taskId: string) => {
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]:
        prev[nodeId]?.map((task) =>
          task.id === taskId ? { ...task, isEditing: !task.isEditing } : task
        ) || [],
    }));
  };

  // Run individual cleaning task
  const runCleaningTask = (nodeId: string, taskId: string) => {
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]:
        prev[nodeId]?.map((task) =>
          task.id === taskId ? { ...task, status: "running" } : task
        ) || [],
    }));

    // Simulate task execution
    setTimeout(() => {
      setCleaningTasks((prev) => ({
        ...prev,
        [nodeId]:
          prev[nodeId]?.map((task) =>
            task.id === taskId ? { ...task, status: "completed" } : task
          ) || [],
      }));

      // Don't set results here - cleaning results should only show in preview
    }, 2000);
  };

  // Run all cleaning tasks
  const runAllCleaningTasks = () => {
    if (!selectedNodeData) return;

    const workflow = tableWorkflows.find((w) =>
      w.nodes.some((n) => n.id === selectedNodeData.id)
    );
    const tasks = workflow
      ? getCleaningTasksForNode(selectedNodeData.id, workflow.tableName)
      : [];

    // Set all tasks to running
    setCleaningTasks((prev) => ({
      ...prev,
      [selectedNodeData.id]:
        prev[selectedNodeData.id]?.map((task) => ({
          ...task,
          status: "running",
        })) || [],
    }));

    // Simulate running all tasks with staggered completion
    tasks.forEach((task, index) => {
      setTimeout(() => {
        setCleaningTasks((prev) => ({
          ...prev,
          [selectedNodeData.id]:
            prev[selectedNodeData.id]?.map((t) =>
              t.id === task.id ? { ...t, status: "confirmed" } : t
            ) || [],
        }));

        // After最后一个任务，展示所有任务运行后的数据
        if (index === tasks.length - 1) {
          // 获取所有已确认任务，依次应用
          const originalData = getCurrentNodeDataTable(selectedNodeData.id);
          let processedData = [...originalData];
          tasks.forEach((t) => {
            processedData = applyTaskToData(processedData, t);
          });
          setNodeDataTables((prev) => ({
            ...prev,
            [selectedNodeData.id]: processedData,
          }));
          setResults({
            type: "cleaning_task_table",
            summary: `All cleaning tasks completed. Showing processed data after all tasks.`,
            data: processedData.slice(0, 50),
            stats: {
              tableName: workflow?.tableName || "table",
              totalRows: workflow?.tableData.rows || 0,
              processed: processedData.length,
              changed: processedData.length, // 可根据需要调整
            },
          });
        }
      }, index * 1000); // Stagger by 1 second each
    });
  };

  // Get cleaning tasks for a node
  const getCleaningTasksForNode = (nodeId: string, tableName: string) => {
    if (!cleaningTasks[nodeId]) {
      const tasks = generateCleaningTasks(tableName);
      setCleaningTasks((prev) => ({
        ...prev,
        [nodeId]: tasks,
      }));
      return tasks;
    }
    return cleaningTasks[nodeId];
  };

  // Apply configuration and run node
  const applyConfigurationAndRun = () => {
    if (selectedNodeData) {
      updateNodeConfig(selectedNodeData.id, selectedNodeData.config || {});
      runNode(selectedNodeData.id);
    }
  };

  // Generate arrow path between two nodes
  const generateArrowPath = (fromNode: WorkflowNode, toNode: WorkflowNode) => {
    const fromX = fromNode.position.x + NODE_WIDTH;
    const fromY = fromNode.position.y + NODE_HEIGHT / 2;
    const toX = toNode.position.x;
    const toY = toNode.position.y + NODE_HEIGHT / 2;

    return `M ${fromX} ${fromY} L ${toX} ${toY}`;
  };

  // Add custom cleaning task
  const addCustomCleaningTask = () => {
    if (
      !newTaskColumn ||
      !newTaskDescription ||
      !currentNodeId ||
      !addTaskCategory
    ) {
      return;
    }

    const newTask = {
      id: `custom-task-${Date.now()}`,
      type: addTaskCategory,
      column: newTaskColumn,
      description: newTaskDescription,
      detail: `Custom task: ${newTaskDescription}`,
      isEditing: false,
      status: "pending",
    };

    setCleaningTasks((prev) => ({
      ...prev,
      [currentNodeId]: prev[currentNodeId]
        ? [newTask, ...prev[currentNodeId]] // Add to first position
        : [newTask],
    }));

    // Reset form and close dialog
    setNewTaskColumn("");
    setNewTaskDescription("");
    setAddTaskCategory("");
    setCurrentNodeId("");
    setShowAddTaskDialog(false);
  };

  // Open add task dialog
  const openAddTaskDialog = (category: string, nodeId: string) => {
    setAddTaskCategory(category);
    setCurrentNodeId(nodeId);
    setShowAddTaskDialog(true);
  };

  // Model recommendations based on preferences
  const getRecommendedModel = (preferences: any) => {
    const { accuracyVsRobustness, complexityVsSimplicity, speedVsAccuracy } =
      preferences;

    if (
      accuracyVsRobustness === "accuracy" &&
      complexityVsSimplicity === "complexity" &&
      speedVsAccuracy === "accuracy"
    ) {
      return { name: "Random Forest", needsParams: true };
    } else if (
      accuracyVsRobustness === "robustness" &&
      complexityVsSimplicity === "simplicity"
    ) {
      return { name: "Logistic Regression", needsParams: false };
    } else if (
      speedVsAccuracy === "speed" &&
      complexityVsSimplicity === "simplicity"
    ) {
      return { name: "Decision Tree", needsParams: true };
    } else if (
      accuracyVsRobustness === "accuracy" &&
      speedVsAccuracy === "accuracy"
    ) {
      return { name: "XGBoost", needsParams: true };
    } else {
      return { name: "Linear Regression", needsParams: false };
    }
  };

  // Update modeling configuration
  const updateModelingConfig = (nodeId: string, updates: any) => {
    setModelingConfig((prev) => ({
      ...prev,
      [nodeId]: { ...prev[nodeId], ...updates },
    }));
  };

  // Initialize modeling config
  const initModelingConfig = (nodeId: string) => {
    if (!modelingConfig[nodeId]) {
      setModelingConfig((prev) => ({
        ...prev,
        [nodeId]: {
          target: "",
          preferences: {
            accuracyVsRobustness: "",
            complexityVsSimplicity: "",
            speedVsAccuracy: "",
          },
          recommendedModel: "",
          modelParameters: {},
          features: [],
        },
      }));
    }
  };

  // Initialize transformation config
  const initTransformationConfig = (nodeId: string) => {
    if (!transformationConfig[nodeId]) {
      setTransformationConfig((prev) => ({
        ...prev,
        [nodeId]: {
          operationType: "",
          groupByColumns: [],
          aggregations: [],
          joinType: "inner",
          joinColumn: "",
          pivotColumn: "",
          valueColumn: "",
          pivotValues: [],
        },
      }));
    }
  };

  // Run modeling operation
  const runModelingOperation = (nodeId: string) => {
    const config = modelingConfig[nodeId];
    if (!config || !config.target || !config.features.length) {
      return;
    }

    // Set node to running state
    setTableWorkflows((prev) =>
      prev.map((workflow) => ({
        ...workflow,
        nodes: workflow.nodes.map((node) =>
          node.id === nodeId ? { ...node, status: "running" } : node
        ),
      }))
    );

    // Simulate model training and evaluation
    setTimeout(() => {
      setTableWorkflows((prev) =>
        prev.map((workflow) => ({
          ...workflow,
          nodes: workflow.nodes.map((node) =>
            node.id === nodeId ? { ...node, status: "completed" } : node
          ),
        }))
      );

      // Generate mock evaluation results
      const workflow = tableWorkflows.find((w) =>
        w.nodes.some((n) => n.id === nodeId)
      );
      const mockResults = {
        nodeId,
        type: "modeling_evaluation",
        summary: `Model training completed. ${
          config.recommendedModel
        } achieved ${(Math.random() * 15 + 85).toFixed(1)}% accuracy.`,
        data: {
          model: config.recommendedModel,
          target: config.target,
          features: config.features,
          tableName: workflow?.tableName || "table",
          errorRates: {
            trainingError: (Math.random() * 0.1 + 0.05).toFixed(3),
            validationError: (Math.random() * 0.15 + 0.08).toFixed(3),
            testError: (Math.random() * 0.2 + 0.1).toFixed(3),
          },
          confusionMatrix: [
            [85, 3, 2],
            [4, 78, 8],
            [1, 5, 84],
          ],
          featureImportance: config.features
            .map((feature, index) => ({
              feature,
              importance: Math.random() * 0.8 + 0.1,
            }))
            .sort((a, b) => b.importance - a.importance),
        },
      };

      setResults(mockResults);
    }, 3000);
  };

  // Check if modeling configuration is complete
  const isModelingConfigComplete = (config: any) => {
    return (
      config &&
      config.target &&
      config.preferences.accuracyVsRobustness &&
      config.preferences.complexityVsSimplicity &&
      config.preferences.speedVsAccuracy &&
      config.features.length > 0
    );
  };

  // Update task value
  const updateTaskValue = (nodeId: string, taskId: string, value: string) => {
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]:
        prev[nodeId]?.map((task) =>
          task.id === taskId ? { ...task, userValue: value } : task
        ) || [],
    }));
  };

  // Preview cleaning task
  const previewCleaningTask = (nodeId: string, taskId: string) => {
    // 重置所有查看状态，只保留当前任务为已查看状态
    setViewedTasks({
      [`${nodeId}-${taskId}`]: true,
    });

    const workflow = tableWorkflows.find((w) =>
      w.nodes.some((n) => n.id === nodeId)
    );
    if (!workflow) return;

    const task = cleaningTasks[nodeId]?.find((t) => t.id === taskId);
    if (!task) return;

    // 使用当前节点的累积数据表，而不是原始数据
    const originalData = getCurrentNodeDataTable(nodeId);

    // 模拟当前任务的修改效果
    let processedData = [...originalData];

    if (task.action === "remove_duplicates") {
      // 对于去重操作，直接处理整个数据集
      const seen = new Set();
      processedData = originalData.filter((row) => {
        const key = JSON.stringify(row);
        if (seen.has(key)) {
          return false;
        }
        seen.add(key);
        return true;
      });
    } else {
      // 对于其他操作，使用现有的applyTaskToData函数
      processedData = applyTaskToData(originalData, task);
    }

    // Create comparison data with processed column next to original column
    const comparisonData = originalData.map((row, index) => {
      const comparison: any = {};

      // Add columns in order, with processed column right after the original column
      Object.keys(row).forEach((key) => {
        comparison[key] = row[key];

        // If this is the column being processed, add the processed version right after
        if (task.column && key === task.column) {
          comparison[`${task.column}_processed`] = processedData[index]
            ? processedData[index][task.column]
            : row[task.column];
        }
      });

      return comparison;
    });

    // Calculate affected rows count
    let affectedRowsCount = 0;
    if (task.action === "remove_duplicates") {
      affectedRowsCount = originalData.length - processedData.length;
    } else {
      // 计算有多少行被修改
      affectedRowsCount = originalData.filter((row, index) => {
        if (!task.column) return false;
        const originalValue = row[task.column];
        const processedValue = processedData[index]
          ? processedData[index][task.column]
          : originalValue;
        return originalValue !== processedValue;
      }).length;
    }

    const totalRows = workflow.tableData.rows;

    setResults({
      type: "cleaning_preview",
      summary: `Preview: ${task.description} on ${task.column || "table"}`,
      data: comparisonData,
      task: {
        id: taskId,
        column: task.column,
        description: task.description,
        action: task.action,
        tableName: workflow.tableName,
        affectedRows: affectedRowsCount,
        totalRows: totalRows,
      },
    });
  };

  // Confirm cleaning task
  const confirmCleaningTask = (nodeId: string, taskId: string) => {
    const task = cleaningTasks[nodeId]?.find((t) => t.id === taskId);
    if (!task) return;

    // 更新任务状态
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]:
        prev[nodeId]?.map((t) =>
          t.id === taskId ? { ...t, status: "confirmed" } : t
        ) || [],
    }));

    // 获取当前数据并应用任务修改
    const currentData = getCurrentNodeDataTable(nodeId);
    let modifiedData = [...currentData];

    if (task.action === "remove_duplicates") {
      // 对于去重操作
      const seen = new Set();
      modifiedData = currentData.filter((row) => {
        const key = JSON.stringify(row);
        if (seen.has(key)) {
          return false;
        }
        seen.add(key);
        return true;
      });
    } else {
      // 对于其他操作
      modifiedData = applyTaskToData(currentData, task);
    }

    // 保存修改后的数据到节点数据表
    setNodeDataTables((prev) => ({
      ...prev,
      [nodeId]: modifiedData,
    }));

    // 确认任务后，完全清空查看状态，所有任务的查看图标都恢复可用
    setViewedTasks({});
  };

  // Delete cleaning task
  const deleteCleaningTask = (nodeId: string, taskId: string) => {
    const task = cleaningTasks[nodeId]?.find((t) => t.id === taskId);

    // 如果任务已确认，则不允许删除
    if (task?.status === "confirmed") {
      return;
    }

    // 删除未确认的任务
    setCleaningTasks((prev) => ({
      ...prev,
      [nodeId]: prev[nodeId]?.filter((t) => t.id !== taskId) || [],
    }));

    // 重新计算该节点的数据表（移除被删除任务的影响）
    const workflow = tableWorkflows.find((w) =>
      w.nodes.some((n) => n.id === nodeId)
    );
    if (workflow) {
      const currentNodeIndex = workflow.nodes.findIndex((n) => n.id === nodeId);
      if (currentNodeIndex !== -1) {
        // 从前一个节点或原始数据开始重新计算
        let baseData: any[] = [];
        if (currentNodeIndex === 0) {
          // 如果是第一个节点，使用原始数据
          baseData = generateMockTableDataFromReal(workflow.tableData);
        } else {
          // 否则使用前一个节点的数据
          const prevNode = workflow.nodes[currentNodeIndex - 1];
          baseData = getCurrentNodeDataTable(prevNode.id);
        }

        // 应用剩余的已确认任务
        const remainingTasks =
          cleaningTasks[nodeId]?.filter(
            (t) => t.id !== taskId && t.status === "confirmed"
          ) || [];

        let updatedData = [...baseData];
        remainingTasks.forEach((remainingTask) => {
          if (remainingTask.action === "remove_duplicates") {
            const seen = new Set();
            updatedData = updatedData.filter((row) => {
              const key = JSON.stringify(row);
              if (seen.has(key)) {
                return false;
              }
              seen.add(key);
              return true;
            });
          } else {
            updatedData = applyTaskToData(updatedData, remainingTask);
          }
        });

        // 更新节点数据表
        setNodeDataTables((prev) => ({
          ...prev,
          [nodeId]: updatedData,
        }));
      }
    }

    // 清除相关的查看状态
    setViewedTasks((prev) => {
      const newState = { ...prev };
      delete newState[`${nodeId}-${taskId}`];
      return newState;
    });
  };

  const Histogram = () => (
    <div className="h-24 w-full flex items-end space-x-1 p-2 border rounded-lg bg-slate-50">
      {Array.from({ length: 15 }).map((_, i) => (
        <div
          key={i}
          className="bg-blue-400 flex-1 rounded-t"
          style={{ height: `${Math.random() * 100}%` }}
        ></div>
      ))}
    </div>
  );

  const PieChartViz = () => (
    <div
      className="h-24 w-24 rounded-full border"
      style={{
        backgroundImage: `conic-gradient(
            #60a5fa 0% 30%, 
            #3b82f6 30% 55%, 
            #93c5fd 55% 80%,
            #bfdbfe 80% 100%
        )`,
      }}
    ></div>
  );

  const BoxPlot = () => (
    <div className="h-24 w-full flex items-center justify-center p-2 border rounded-lg bg-slate-50">
      <div className="relative h-10 w-4/5 flex items-center">
        {/* Whiskers */}
        <div className="absolute top-1/2 left-0 w-1/4 h-px bg-slate-600"></div>
        <div className="absolute top-1/2 right-0 w-1/4 h-px bg-slate-600"></div>
        <div className="absolute left-0 h-4 w-px bg-slate-600 top-1/2 -translate-y-1/2"></div>
        <div className="absolute right-0 h-4 w-px bg-slate-600 top-1/2 -translate-y-1/2"></div>

        {/* Box */}
        <div className="absolute left-1/4 w-1/2 h-full border border-slate-600 bg-blue-100"></div>

        {/* Median line */}
        <div className="absolute top-0 left-1/2 w-px h-full bg-slate-800"></div>
      </div>
    </div>
  );

  const DataInspectionPanel = () => {
    const selectedNodeData = getAllNodes().find((n) => n.id === selectedNode);

    if (!selectedNodeData) {
      return (
        <div className="h-full flex items-center justify-center text-slate-500">
          <div>
            <Search className="w-12 h-12 mx-auto text-slate-300" />
            <p className="mt-2">Select a node to inspect its data.</p>
          </div>
        </div>
      );
    }

    const workflow = tableWorkflows.find((w) =>
      w.nodes.some((n) => n.id === selectedNodeData.id)
    );

    if (!workflow) return null;

    const nodeIndex = workflow.nodes.findIndex(
      (n) => n.id === selectedNodeData.id
    );
    const baseTable = workflow.tableData;

    const confirmedTasks: any[] = [];
    workflow.nodes.slice(0, nodeIndex + 1).forEach((node) => {
      if (node.operationType === "cleaning" && cleaningTasks[node.id]) {
        const tasks = cleaningTasks[node.id].filter(
          (t) => t.status === "confirmed"
        );
        confirmedTasks.push(...tasks);
      }
    });

    const getColumnStats = (column: DatasetColumn) => {
      const colTasks = confirmedTasks.filter((t) => t.column === column.name);

      let missingPct =
        baseTable.rows > 0 && !column.nonNull ? Math.random() * 5 : 0;
      let rowCount = baseTable.rows;

      // Apply confirmed cleaning tasks to statistics
      colTasks.forEach((task) => {
        if (task.action === "replace_missing") {
          missingPct = 0; // Missing values replaced
        } else if (task.action === "remove_duplicates") {
          rowCount = Math.round(rowCount * 0.99); // Slight reduction from duplicate removal
        } else if (task.action === "fix_values") {
          // Improve data quality by reducing invalid entries
          missingPct = Math.max(0, missingPct - 1);
        }
      });

      const isNumeric = column.type === "integer" || column.type === "float";
      const isCategorical =
        column.type === "string" && !column.name.includes("_id");

      // Adjust unique values based on cleaning
      let uniqueCount =
        Math.floor(Math.random() * (isCategorical ? 15 : rowCount / 100)) + 1;
      if (colTasks.some((t) => t.action === "standardize_values")) {
        uniqueCount = Math.max(1, Math.floor(uniqueCount * 0.8)); // Standardization reduces unique values
      }

      // Adjust variance and std dev based on outlier removal
      let variance = isNumeric ? (Math.random() * 100) ** 2 : 0;
      let stdDev = isNumeric ? Math.sqrt(variance) : 0;
      if (colTasks.some((t) => t.action === "outlier_removal")) {
        variance *= 0.7; // Outlier removal reduces variance
        stdDev = Math.sqrt(variance);
      }

      return {
        type: column.type,
        count: Math.round(rowCount * (1 - missingPct / 100)),
        unique: uniqueCount,
        missing: missingPct.toFixed(1) + "%",
        std: isNumeric ? stdDev.toFixed(2) : "N/A",
        var: isNumeric ? variance.toFixed(2) : "N/A",
        isCategorical,
        isNumeric,
        uniqueValues: isCategorical
          ? ["Alpha", "Bravo", "Charlie", "Delta", "Echo", "Foxtrot"].slice(
              0,
              Math.floor(Math.random() * 5) + 2
            )
          : [],
        cleaningApplied:
          colTasks.length > 0
            ? colTasks.map((t) => t.description).join(", ")
            : null,
      };
    };

    return (
      <ScrollArea className="h-full">
        <div className="p-4 space-y-6">
          <div className="pb-2 border-b">
            <h4 className="font-semibold text-lg text-slate-800">
              Data Inspection
            </h4>
            <p className="text-sm text-slate-500">
              Inspecting data at node:{" "}
              <span className="font-medium text-slate-700">
                {selectedNodeData.name}
              </span>
            </p>
          </div>
          {baseTable.columns.map((col) => {
            const stats = getColumnStats(col);
            return (
              <div key={col.name} className="border-b pb-4">
                <div className="flex items-center justify-between mb-3">
                  <h5 className="font-semibold text-base text-slate-800">
                    {col.name}
                  </h5>
                  <div className="flex items-center space-x-2">
                    <span
                      className={`text-xs px-2 py-1 rounded ${
                        col.type === "string"
                          ? "bg-green-100 text-green-700"
                          : col.type === "integer"
                          ? "bg-blue-100 text-blue-700"
                          : col.type === "float"
                          ? "bg-purple-100 text-purple-700"
                          : col.type === "date"
                          ? "bg-orange-100 text-orange-700"
                          : "bg-gray-100 text-gray-700"
                      }`}
                    >
                      {col.type}
                    </span>
                    {col.nonNull && (
                      <span className="text-xs px-2 py-1 bg-red-100 text-red-700 rounded">
                        Required
                      </span>
                    )}
                  </div>
                </div>
                <p className="text-sm text-slate-600 mb-3">{col.description}</p>
                {stats.cleaningApplied && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-2 mb-3">
                    <p className="text-xs text-green-700">
                      <strong>Applied cleaning:</strong> {stats.cleaningApplied}
                    </p>
                  </div>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="space-y-3">
                    <h6 className="font-medium text-sm text-slate-600">
                      Statistics
                    </h6>
                    <div className="text-xs space-y-1 text-slate-700">
                      <p className="flex justify-between">
                        <span>Type:</span>{" "}
                        <Badge variant="outline">{stats.type}</Badge>
                      </p>
                      <p className="flex justify-between">
                        <span>Count:</span>{" "}
                        <span>{stats.count.toLocaleString()}</span>
                      </p>
                      <p className="flex justify-between">
                        <span>Unique Values:</span>{" "}
                        <span>{stats.unique.toLocaleString()}</span>
                      </p>
                      <p className="flex justify-between">
                        <span>Missing:</span>{" "}
                        <span className="text-red-600">{stats.missing}</span>
                      </p>
                      <p className="flex justify-between">
                        <span>Std. Dev:</span> <span>{stats.std}</span>
                      </p>
                      <p className="flex justify-between">
                        <span>Variance:</span> <span>{stats.var}</span>
                      </p>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <h6 className="font-medium text-sm text-slate-600">
                      Distribution
                    </h6>
                    {stats.isNumeric && <Histogram />}
                    {stats.isCategorical && (
                      <div className="flex items-center space-x-4">
                        <PieChartViz />
                        <div className="text-xs space-y-1">
                          {stats.uniqueValues.map((v) => (
                            <p key={v}>{v}</p>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  <div className="space-y-3">
                    <h6 className="font-medium text-sm text-slate-600">
                      Range
                    </h6>
                    {stats.isNumeric && <BoxPlot />}
                    {!stats.isNumeric && (
                      <p className="text-xs text-slate-400 text-center pt-8">
                        Not applicable for non-numeric data.
                      </p>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </ScrollArea>
    );
  };

  // 获取当前节点应该使用的数据表（基于已确认的任务累积修改）
  const getCurrentNodeDataTable = (nodeId: string) => {
    // 如果节点已有处理后的数据表，直接返回
    if (nodeDataTables[nodeId]) {
      return nodeDataTables[nodeId];
    }

    // 找到对应的工作流
    const workflow = tableWorkflows.find((w) =>
      w.nodes.some((n) => n.id === nodeId)
    );
    if (!workflow) return [];

    // 获取当前节点在工作流中的位置
    const currentNodeIndex = workflow.nodes.findIndex((n) => n.id === nodeId);
    if (currentNodeIndex === -1) return [];

    // 从原始表格数据开始
    let currentData = generateMockTableDataFromReal(workflow.tableData);

    // 按顺序应用之前所有已确认的操作
    for (let i = 0; i <= currentNodeIndex; i++) {
      const node = workflow.nodes[i];
      if (node.type === "operation" && node.operationType === "cleaning") {
        // 如果该节点有处理后的数据，使用它
        if (nodeDataTables[node.id]) {
          currentData = nodeDataTables[node.id];
        } else {
          // 否则应用该节点的已确认任务
          const tasks = cleaningTasks[node.id] || [];
          const confirmedTasks = tasks.filter((t) => t.status === "confirmed");

          confirmedTasks.forEach((task) => {
            currentData = applyTaskToData(currentData, task);
          });
        }
      }
    }

    return currentData;
  };

  // 应用单个任务到数据表
  const applyTaskToData = (data: any[], task: any) => {
    return data.map((row) => {
      const newRow = { ...row };

      if (task.action === "replace_missing" && task.column) {
        if (row[task.column] === null || row[task.column] === "") {
          newRow[task.column] = task.userValue;
        }
      } else if (task.action === "standardize_values" && task.column) {
        if (task.column === "Status" && typeof row[task.column] === "string") {
          const status = row[task.column];
          if (status.includes("Shipped")) newRow[task.column] = "Shipped";
          else if (status.includes("Cancelled"))
            newRow[task.column] = "Cancelled";
          else newRow[task.column] = "Pending";
        } else if (
          task.column === "Category" &&
          typeof row[task.column] === "string"
        ) {
          newRow[task.column] = row[task.column]
            .split(" ")
            .map(
              (word: string) =>
                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
            )
            .join(" ");
        }
      } else if (task.action === "fix_format" && task.column) {
        if (
          task.column === "ship-postal-code" &&
          typeof row[task.column] === "string"
        ) {
          newRow[task.column] = row[task.column].replace(".0", "");
        } else if (
          task.column === "Weight" &&
          typeof row[task.column] === "number"
        ) {
          newRow[task.column] = Number(row[task.column]).toFixed(2);
        }
      } else if (task.action === "fix_values" && task.column) {
        if (task.column === "Amount" && row[task.column] === 0) {
          newRow[task.column] = task.userValue === "Keep as 0.00" ? 0.0 : null;
        } else if (
          task.column === "Stock" &&
          typeof row[task.column] === "number" &&
          row[task.column] < 0
        ) {
          newRow[task.column] =
            task.userValue === "Set to 0" ? 0 : row[task.column];
        }
      } else if (task.action === "trim_whitespace" && task.column) {
        if (typeof row[task.column] === "string") {
          newRow[task.column] = row[task.column].trim();
        }
      } else if (task.action === "normalize_text" && task.column) {
        if (typeof row[task.column] === "string") {
          newRow[task.column] = row[task.column]
            .split(" ")
            .map(
              (word: string) =>
                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
            )
            .join(" ");
        }
      } else if (task.action === "remove_duplicates") {
        // 对于去重操作，需要在外层处理
        return newRow;
      }

      return newRow;
    });
  };

  // Run column/row operation
  const runColumnRowOperation = (nodeId: string) => {
    const config = columnRowConfig[nodeId];
    if (!config || !config.operationType) return;

    // Set node to running state
    setTableWorkflows((prev) =>
      prev.map((workflow) => ({
        ...workflow,
        nodes: workflow.nodes.map((node) =>
          node.id === nodeId ? { ...node, status: "running" } : node
        ),
      }))
    );

    // Get current data
    const currentData = getCurrentNodeDataTable(nodeId);
    let processedData = [...currentData];

    // Apply operations based on configuration
    if (config.activeTab === "row") {
      if (config.operationType === "filter_rows") {
        // Apply filter conditions
        processedData = currentData.filter((row) => {
          return config.filterConditions.every((condition) => {
            const value = row[condition.column];
            const conditionValue = condition.value;

            switch (condition.operator) {
              case "equals":
                return value == conditionValue;
              case "not_equals":
                return value != conditionValue;
              case "greater":
                return Number(value) > Number(conditionValue);
              case "less":
                return Number(value) < Number(conditionValue);
              case "contains":
                return String(value)
                  .toLowerCase()
                  .includes(String(conditionValue).toLowerCase());
              default:
                return true;
            }
          });
        });
      } else if (config.operationType === "sort_rows") {
        // Apply sorting
        processedData = [...currentData].sort((a, b) => {
          for (const sortCol of config.sortColumns) {
            const aVal = a[sortCol.column];
            const bVal = b[sortCol.column];

            let comparison = 0;
            if (aVal < bVal) comparison = -1;
            else if (aVal > bVal) comparison = 1;

            if (comparison !== 0) {
              return sortCol.direction === "asc" ? comparison : -comparison;
            }
          }
          return 0;
        });
      }
    } else if (config.activeTab === "column") {
      // Column operations processing
      if (config.operationType === "remove_column") {
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          config.selectedColumns.forEach((col) => {
            delete newRow[col];
          });
          return newRow;
        });
      } else if (config.operationType === "add_column") {
        // Add new column with default values based on type
        const defaultValue = (() => {
          switch (config.newColumnType) {
            case "string":
              return "";
            case "integer":
              return 0;
            case "float":
              return 0.0;
            case "date":
              return new Date().toISOString().split("T")[0];
            case "boolean":
              return false;
            default:
              return "";
          }
        })();

        processedData = currentData.map((row) => ({
          ...row,
          [config.newColumnName || "new_column"]: defaultValue,
        }));
      } else if (config.operationType === "rename_column") {
        const oldColumnName = config.selectedColumns[0];
        const newColumnName = config.newColumnName;

        processedData = currentData.map((row) => {
          const newRow: any = {};
          // 保持列的原始顺序，只替换列名
          Object.keys(row).forEach((key) => {
            if (key === oldColumnName && newColumnName) {
              newRow[newColumnName] = row[key];
            } else {
              newRow[key] = row[key];
            }
          });
          return newRow;
        });
      } else if (config.operationType === "duplicate_column") {
        const columnToDuplicate = config.selectedColumns[0];

        processedData = currentData.map((row) => ({
          ...row,
          [`${columnToDuplicate}_copy`]: row[columnToDuplicate],
        }));
      } else if (config.operationType === "combine_column") {
        if (
          !config.newColumnName ||
          !config.combineColumns ||
          config.combineColumns.length === 0
        )
          return;
        const newColumnName = config.newColumnName;
        const combineColumns = config.combineColumns;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          const combinedValue = combineColumns.map((col) => row[col]).join("-"); // Use dash separator for combining
          newRow[newColumnName] = combinedValue;
          return newRow;
        });
      } else if (config.operationType === "split_column") {
        if (
          !config.splitColumn ||
          !config.splitNewColumns ||
          config.splitNewColumns.length === 0
        )
          return;
        const splitColumn = config.splitColumn;
        const splitNewColumns = config.splitNewColumns;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          const originalValue = String(row[splitColumn]);

          // Handle date splitting specifically
          if (splitColumn === "Date" && originalValue.includes("-")) {
            const parts = originalValue.split("-");
            splitNewColumns.forEach((newCol, index) => {
              if (newCol) {
                // Only assign if column name is not empty
                newRow[newCol] = parts[index] || null;
              }
            });
          } else {
            // Generic splitting by dash
            const values = originalValue.split("-");
            splitNewColumns.forEach((newCol, index) => {
              if (newCol) {
                // Only assign if column name is not empty
                newRow[newCol] = values[index] || null;
              }
            });
          }
          return newRow;
        });
      }
    }

    // Simulate operation delay
    setTimeout(() => {
      setTableWorkflows((prev) =>
        prev.map((workflow) => ({
          ...workflow,
          nodes: workflow.nodes.map((node) =>
            node.id === nodeId ? { ...node, status: "completed" } : node
          ),
        }))
      );

      // Save processed data
      setNodeDataTables((prev) => ({
        ...prev,
        [nodeId]: processedData,
      }));

      // Show results
      const workflow = tableWorkflows.find((w) =>
        w.nodes.some((n) => n.id === nodeId)
      );

      // Determine highlighted columns and rows
      let highlightedColumns: string[] = [];
      let highlightedRows: number[] = [];
      let operationDetails: any = {};

      if (config.activeTab === "column") {
        if (config.operationType === "add_column") {
          highlightedColumns = [config.newColumnName || "new_column"];
          operationDetails.addedColumn = config.newColumnName;
          operationDetails.columnType = config.newColumnType;
        } else if (config.operationType === "rename_column") {
          highlightedColumns = [config.newColumnName || ""];
          operationDetails.renamedFrom = config.selectedColumns[0];
          operationDetails.renamedTo = config.newColumnName;
        } else if (config.operationType === "duplicate_column") {
          const originalColumn = config.selectedColumns[0];
          highlightedColumns = [originalColumn, `${originalColumn}_copy`];
          operationDetails.duplicatedColumn = originalColumn;
        } else if (config.operationType === "remove_column") {
          // For removed columns, we track what was removed in operation details
          operationDetails.removedColumns = config.selectedColumns;
        }
        // Force highlight first column for testing
        if (highlightedColumns.length === 0 && processedData.length > 0) {
          highlightedColumns = [Object.keys(processedData[0])[0]];
        }
      } else if (config.activeTab === "row") {
        if (config.operationType === "filter_rows") {
          // All remaining rows are highlighted since they passed the filter
          highlightedRows = processedData.map((_, index) => index);
          operationDetails.filteredOut =
            currentData.length - processedData.length;
        } else if (config.operationType === "sort_rows") {
          // Highlight rows that changed position due to sorting
          const originalOrder = currentData.map((row, index) => ({
            row,
            originalIndex: index,
          }));
          const sortedOrder = processedData.map((row, index) => ({
            row,
            newIndex: index,
          }));

          // Find rows that moved from their original position
          highlightedRows = sortedOrder
            .map((sorted, newIndex) => {
              const original = originalOrder.find(
                (orig) =>
                  JSON.stringify(orig.row) === JSON.stringify(sorted.row)
              );
              return original?.originalIndex !== newIndex ? newIndex : -1;
            })
            .filter((index) => index !== -1);

          operationDetails.sortedBy = config.sortColumns;
        }
      }

      setResults({
        type: "column_row_operation",
        summary: `${
          config.activeTab === "column" ? "Column" : "Row"
        } operation completed: ${config.operationType.replace(/_/g, " ")}. ${
          processedData.length
        } rows in result.`,
        data: processedData.slice(0, 50), // Show first 50 rows
        operation: {
          type: config.operationType,
          tab: config.activeTab,
          tableName: workflow?.tableName || "table",
          originalRows: currentData.length,
          resultRows: processedData.length,
          selectedColumns: config.selectedColumns,
          filterConditions: config.filterConditions,
          sortColumns: config.sortColumns,
          highlightedColumns: highlightedColumns,
          highlightedRows: highlightedRows,
          operationDetails: operationDetails,
        },
      });
    }, 2000);
  };

  const previewColumnRowOperation = (nodeId: string) => {
    const config = columnRowConfig[nodeId];
    if (!config || !config.operationType) return;

    const currentData = getCurrentNodeDataTable(nodeId);
    let processedData = [...currentData];

    if (config.activeTab === "column") {
      if (config.operationType === "combine_column") {
        if (
          !config.newColumnName ||
          !config.combineColumns ||
          config.combineColumns.length === 0
        )
          return;
        const newColumnName = config.newColumnName;
        const combineColumns = config.combineColumns;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          const combinedValue = combineColumns.map((col) => row[col]).join("-"); // Use dash separator for combining
          newRow[newColumnName] = combinedValue;
          return newRow;
        });
      } else if (config.operationType === "split_column") {
        if (
          !config.splitColumn ||
          !config.splitNewColumns ||
          config.splitNewColumns.length === 0
        )
          return;
        const splitColumn = config.splitColumn;
        const splitNewColumns = config.splitNewColumns;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          const originalValue = String(row[splitColumn]);

          // Handle date splitting specifically
          if (splitColumn === "Date" && originalValue.includes("-")) {
            const parts = originalValue.split("-");
            splitNewColumns.forEach((newCol, index) => {
              if (newCol) {
                // Only assign if column name is not empty
                newRow[newCol] = parts[index] || null;
              }
            });
          } else {
            // Generic splitting by dash
            const values = originalValue.split("-");
            splitNewColumns.forEach((newCol, index) => {
              if (newCol) {
                // Only assign if column name is not empty
                newRow[newCol] = values[index] || null;
              }
            });
          }
          return newRow;
        });
      } else if (config.operationType === "remove_column") {
        if (!config.selectedColumns || config.selectedColumns.length === 0)
          return;
        const columnToRemove = config.selectedColumns[0];
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          delete newRow[columnToRemove];
          return newRow;
        });
      } else if (config.operationType === "rename_column") {
        if (
          !config.selectedColumns ||
          config.selectedColumns.length === 0 ||
          !config.newColumnName
        )
          return;
        const oldColumnName = config.selectedColumns[0];
        const newColumnName = config.newColumnName;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          newRow[newColumnName] = newRow[oldColumnName];
          delete newRow[oldColumnName];
          return newRow;
        });
      } else if (config.operationType === "combine_column") {
        if (
          !config.newColumnName ||
          !config.combineColumns ||
          config.combineColumns.length === 0
        )
          return;
        const newColumnName = config.newColumnName;
        const combineColumns = config.combineColumns;
        processedData = currentData.map((row) => {
          const newRow = { ...row };
          const combinedValue = combineColumns.map((col) => row[col]).join("-"); // Use dash separator for combining
          newRow[newColumnName] = combinedValue;
          return newRow;
        });
      }
    }

    setResults({
      type: "column_row_operation",
      summary: `Preview: ${config.operationType.replace(
        /_/g,
        " "
      )} operation (changes not saved)`,
      data: processedData.slice(0, 50),
      operation: {
        type: config.operationType,
        originalRows: currentData.length,
        resultRows: processedData.length,
        operationDetails: {
          isPreview: true,
        },
      },
    });
  };

  // Run transformation operation
  const runTransformationOperation = (nodeId: string) => {
    const config = transformationConfig[nodeId];
    if (!config || !config.operationType) return;

    // Set node to running state
    setTableWorkflows((prev) =>
      prev.map((workflow) => ({
        ...workflow,
        nodes: workflow.nodes.map((node) =>
          node.id === nodeId ? { ...node, status: "running" } : node
        ),
      }))
    );

    // Get current data
    const currentData = getCurrentNodeDataTable(nodeId);
    let processedData = [...currentData];

    // Apply transformation based on configuration
    if (config.operationType === "group_by") {
      if (config.groupByColumns.length > 0) {
        // Group data by selected columns
        const groupedData: Record<string, any[]> = {};

        currentData.forEach((row) => {
          const groupKey = config.groupByColumns
            .map((col) => row[col])
            .join("|");
          if (!groupedData[groupKey]) {
            groupedData[groupKey] = [];
          }
          groupedData[groupKey].push(row);
        });

        // Apply aggregations
        processedData = Object.entries(groupedData).map(([groupKey, rows]) => {
          const result: any = {};

          // Add group by columns
          config.groupByColumns.forEach((col, index) => {
            result[col] = groupKey.split("|")[index];
          });

          // Apply aggregation functions
          config.aggregations.forEach((agg) => {
            if (agg.column && agg.function) {
              const columnName = agg.alias || `${agg.function}_${agg.column}`;
              const values = rows
                .map((row) => row[agg.column])
                .filter((val) => val != null);

              switch (agg.function) {
                case "count":
                  result[columnName] = rows.length;
                  break;
                case "sum":
                  result[columnName] = values.reduce(
                    (sum, val) => sum + Number(val || 0),
                    0
                  );
                  break;
                case "avg":
                  result[columnName] =
                    values.length > 0
                      ? values.reduce((sum, val) => sum + Number(val || 0), 0) /
                        values.length
                      : 0;
                  break;
                case "min":
                  result[columnName] =
                    values.length > 0 ? Math.min(...values.map(Number)) : null;
                  break;
                case "max":
                  result[columnName] =
                    values.length > 0 ? Math.max(...values.map(Number)) : null;
                  break;
                case "first":
                  result[columnName] = values.length > 0 ? values[0] : null;
                  break;
                case "last":
                  result[columnName] =
                    values.length > 0 ? values[values.length - 1] : null;
                  break;
                default:
                  result[columnName] = rows.length;
              }
            }
          });

          return result;
        });
      }
    }

    // Simulate operation delay
    setTimeout(() => {
      setTableWorkflows((prev) =>
        prev.map((workflow) => ({
          ...workflow,
          nodes: workflow.nodes.map((node) =>
            node.id === nodeId ? { ...node, status: "completed" } : node
          ),
        }))
      );

      // Save processed data
      setNodeDataTables((prev) => ({
        ...prev,
        [nodeId]: processedData,
      }));

      // Show results
      const workflow = tableWorkflows.find((w) =>
        w.nodes.some((n) => n.id === nodeId)
      );

      let summary = "";
      let operationDetails: any = {};

      if (config.operationType === "group_by") {
        summary = `Group By operation completed. Data grouped by ${config.groupByColumns.join(
          ", "
        )}. ${processedData.length} groups created from ${
          currentData.length
        } rows.`;
        operationDetails = {
          groupByColumns: config.groupByColumns,
          aggregations: config.aggregations,
          originalRows: currentData.length,
          groupedRows: processedData.length,
        };
      }

      setResults({
        type: "transformation",
        summary,
        data: processedData.slice(0, 50), // Show first 50 rows
        operation: {
          type: config.operationType,
          tableName: workflow?.tableName || "table",
          originalRows: currentData.length,
          resultRows: processedData.length,
          operationDetails,
        },
      });
    }, 2000);
  };

  return (
    <div className="h-screen flex flex-col bg-slate-50 overflow-hidden">
      {/* Top Toolbar */}
      <div className="bg-white border-b border-slate-200 p-4 flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="sm" onClick={() => router.push("/")}>
              <Home className="w-4 h-4 mr-2" />
              Back to Home
            </Button>
            <div className="flex items-center space-x-2">
              <Workflow className="w-5 h-5 text-blue-600" />
              <h1 className="text-xl font-semibold">{dataset.name}</h1>
              {isNewDataset && <Badge variant="secondary">New</Badge>}
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm">
              <Undo className="w-4 h-4 mr-1" />
              Undo
            </Button>
            <Button variant="outline" size="sm">
              <Redo className="w-4 h-4 mr-1" />
              Redo
            </Button>
            <Button variant="outline" size="sm">
              <Download className="w-4 h-4 mr-1" />
              Export
            </Button>
            <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
              <Save className="w-4 h-4 mr-1" />
              Save Workflow
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex overflow-hidden">
        {/* Left Sidebar - Dataset Schema */}
        <div className="w-64 bg-white border-r border-slate-200 flex flex-col">
          <div className="p-4 border-b border-slate-200 flex-shrink-0">
            <h3 className="font-medium text-slate-900">Dataset Structure</h3>
            <p className="text-xs text-slate-500 mt-1">7 tables, 155K+ rows</p>
          </div>
          <div className="flex-1 overflow-y-auto">
            <div className="p-3">
              {/* Sales Reports Group */}
              <div className="mb-4">
                <div className="flex items-center space-x-2 text-sm font-medium text-slate-700 mb-2">
                  <Database className="w-4 h-4 text-blue-600" />
                  <span>Sales Reports</span>
                </div>
                <div className="ml-6 space-y-1">
                  {dataset.tables
                    .filter(
                      (table) =>
                        table.name.includes("Sale Report") ||
                        table.name.includes("Amazon")
                    )
                    .map((table: DatasetTable) => (
                      <Card
                        key={table.name}
                        className="cursor-pointer hover:shadow-md transition-shadow p-2"
                        onClick={() => handleTableCardClick(table)}
                      >
                        <div className="flex items-center space-x-2">
                          <TableIcon className="w-3 h-3 text-blue-600" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-xs truncate">
                              {table.name
                                .replace("Sale Report", "")
                                .replace("Amazon ", "") || "Sale Report"}
                              .csv
                            </div>
                            <div className="text-xs text-slate-500">
                              {table.rows.toLocaleString()} rows
                            </div>
                          </div>
                        </div>
                      </Card>
                    ))}
                </div>
              </div>

              {/* Financial Data Group */}
              <div className="mb-4">
                <div className="flex items-center space-x-2 text-sm font-medium text-slate-700 mb-2">
                  <Database className="w-4 h-4 text-green-600" />
                  <span>Financial Data</span>
                </div>
                <div className="ml-6 space-y-1">
                  {dataset.tables
                    .filter(
                      (table) =>
                        table.name.includes("P&L") ||
                        table.name.includes("May") ||
                        table.name.includes("Expense")
                    )
                    .map((table: DatasetTable) => (
                      <Card
                        key={table.name}
                        className="cursor-pointer hover:shadow-md transition-shadow p-2"
                        onClick={() => handleTableCardClick(table)}
                      >
                        <div className="flex items-center space-x-2">
                          <TableIcon className="w-3 h-3 text-green-600" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-xs truncate">
                              {table.name}.csv
                            </div>
                            <div className="text-xs text-slate-500">
                              {table.rows.toLocaleString()} rows
                            </div>
                          </div>
                        </div>
                      </Card>
                    ))}
                </div>
              </div>

              {/* Operations Data */}
              <div className="mb-4">
                <div className="flex items-center space-x-2 text-sm font-medium text-slate-700 mb-2">
                  <Database className="w-4 h-4 text-purple-600" />
                  <span>Operations</span>
                </div>
                <div className="ml-6 space-y-1">
                  {dataset.tables
                    .filter(
                      (table) =>
                        table.name.includes("Warehouse") ||
                        table.name.includes("Cloud")
                    )
                    .map((table: DatasetTable) => (
                      <Card
                        key={table.name}
                        className="cursor-pointer hover:shadow-md transition-shadow p-2"
                        onClick={() => handleTableCardClick(table)}
                      >
                        <div className="flex items-center space-x-2">
                          <TableIcon className="w-3 h-3 text-purple-600" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-xs truncate">
                              {table.name}.csv
                            </div>
                            <div className="text-xs text-slate-500">
                              {table.rows.toLocaleString()} rows
                            </div>
                          </div>
                        </div>
                      </Card>
                    ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Center and Right Content */}
        <div className="flex-1 flex flex-col overflow-hidden">
          <ResizablePanelGroup direction="horizontal">
            {/* Canvas and Results Area */}
            <ResizablePanel
              id="main-content"
              order={1}
              defaultSize={showPropertiesPanel ? 70 : 100}
              minSize={50}
            >
              <ResizablePanelGroup direction="vertical">
                {/* Canvas */}
                <ResizablePanel
                  id="canvas"
                  order={1}
                  defaultSize={60}
                  minSize={30}
                >
                  <div className="h-full bg-slate-50 relative overflow-auto">
                    {tableWorkflows.length === 0 ? (
                      <div className="h-full flex items-center justify-center">
                        <div className="text-center">
                          <Workflow className="w-16 h-16 text-slate-300 mx-auto mb-4" />
                          <h3 className="text-lg font-medium text-slate-600 mb-2">
                            Start Building Your Workflow
                          </h3>
                          <p className="text-slate-500">
                            Click on a table from the left sidebar to begin
                          </p>
                        </div>
                      </div>
                    ) : (
                      <div
                        className="relative w-full"
                        style={{
                          minHeight: `${
                            tableWorkflows.length * ROW_HEIGHT + 100
                          }px`,
                        }}
                      >
                        {/* Grid Pattern */}
                        <div
                          className="absolute inset-0 opacity-10"
                          style={{
                            backgroundImage: `
                              linear-gradient(to right, #e2e8f0 1px, transparent 1px),
                              linear-gradient(to bottom, #e2e8f0 1px, transparent 1px)
                            `,
                            backgroundSize: "20px 20px",
                          }}
                        />

                        {/* SVG for arrows */}
                        <svg
                          className="absolute inset-0 w-full h-full pointer-events-none"
                          style={{ zIndex: 1 }}
                        >
                          {tableWorkflows.map((workflow) =>
                            workflow.nodes.slice(0, -1).map((node, index) => {
                              const nextNode = workflow.nodes[index + 1];
                              return (
                                <g key={`arrow-${node.id}-${nextNode.id}`}>
                                  <path
                                    d={generateArrowPath(node, nextNode)}
                                    stroke="#94a3b8"
                                    strokeWidth="2"
                                    fill="none"
                                    markerEnd="url(#arrowhead)"
                                  />
                                </g>
                              );
                            })
                          )}
                          {/* Arrow marker definition */}
                          <defs>
                            <marker
                              id="arrowhead"
                              markerWidth="10"
                              markerHeight="7"
                              refX="9"
                              refY="3.5"
                              orient="auto"
                            >
                              <polygon
                                points="0 0, 10 3.5, 0 7"
                                fill="#94a3b8"
                              />
                            </marker>
                          </defs>
                        </svg>

                        {/* Workflow Nodes */}
                        {tableWorkflows.map((workflow) =>
                          workflow.nodes.map((node, nodeIndex) => (
                            <div
                              key={node.id}
                              className={`absolute bg-white border-2 rounded-lg shadow-sm cursor-pointer transition-all ${
                                selectedNode === node.id
                                  ? "border-blue-500 shadow-lg"
                                  : "border-slate-200 hover:border-slate-300"
                              } ${
                                node.status === "running"
                                  ? "border-yellow-500"
                                  : node.status === "completed" &&
                                    node.type === "operation"
                                  ? "border-green-500"
                                  : node.status === "error"
                                  ? "border-red-500"
                                  : ""
                              }`}
                              style={{
                                left: node.position.x,
                                top: node.position.y,
                                width: NODE_WIDTH,
                                height: NODE_HEIGHT,
                                zIndex: 2,
                              }}
                              onClick={() => handleNodeClick(node.id)}
                            >
                              <div className="p-3 h-full flex flex-col justify-center">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-2 flex-1">
                                    {node.type === "table" ? (
                                      <TableIcon className="w-4 h-4 text-blue-600 flex-shrink-0" />
                                    ) : (
                                      node.data?.icon && (
                                        <node.data.icon className="w-4 h-4 text-slate-600 flex-shrink-0" />
                                      )
                                    )}
                                    <span className="font-medium text-sm truncate">
                                      {node.name}
                                    </span>
                                  </div>
                                  <div className="flex items-center space-x-1 flex-shrink-0">
                                    {node.type === "operation" && (
                                      <>
                                        {node.status === "completed" && (
                                          <Badge
                                            variant="default"
                                            className="text-xs py-0 px-1"
                                          >
                                            Done
                                          </Badge>
                                        )}
                                        {node.status === "running" && (
                                          <Badge
                                            variant="secondary"
                                            className="text-xs py-0 px-1"
                                          >
                                            Running
                                          </Badge>
                                        )}
                                      </>
                                    )}
                                    <Button
                                      size="sm"
                                      variant="ghost"
                                      className="h-5 w-5 p-0 text-red-500"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        removeNode(node.id);
                                      }}
                                    >
                                      <Trash2 className="w-3 h-3" />
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))
                        )}

                        {/* Add Node Buttons */}
                        {tableWorkflows.map((workflow) =>
                          workflow.nodes.map((node, nodeIndex) => {
                            const isLastNode =
                              nodeIndex === workflow.nodes.length - 1;
                            if (!isLastNode) return null; // Only show + button for the last node in each workflow

                            return (
                              <Button
                                key={`add-${node.id}`}
                                variant="outline"
                                size="sm"
                                className="absolute h-8 w-8 p-0 rounded-full border-dashed border-2 border-slate-300 hover:border-blue-500 hover:bg-blue-50 bg-white"
                                style={{
                                  left: node.position.x + NODE_WIDTH + 20,
                                  top: node.position.y + NODE_HEIGHT / 2 - 16,
                                  zIndex: 3,
                                }}
                                onClick={() => {
                                  setAddNodeAfter(node.id);
                                  setCurrentTableId(workflow.id);
                                  setShowAddNodeDialog(true);
                                }}
                              >
                                <Plus className="w-4 h-4 text-slate-500" />
                              </Button>
                            );
                          })
                        )}
                      </div>
                    )}
                  </div>
                </ResizablePanel>

                <ResizableHandle />

                {/* Results Panel */}
                <ResizablePanel
                  id="results"
                  order={2}
                  defaultSize={40}
                  minSize={20}
                >
                  <div className="h-full bg-white border-t border-slate-200 flex flex-col">
                    <div className="p-4 border-b border-slate-200 flex items-center justify-between">
                      <h3 className="font-medium text-slate-900">Results</h3>
                      <div className="flex items-center space-x-1 bg-slate-100 p-1 rounded-lg">
                        <Button
                          variant={
                            activeResultsTab === "output"
                              ? "secondary"
                              : "ghost"
                          }
                          size="sm"
                          className="h-7"
                          onClick={() => setActiveResultsTab("output")}
                        >
                          Output
                        </Button>
                        <Button
                          variant={
                            activeResultsTab === "inspection"
                              ? "secondary"
                              : "ghost"
                          }
                          size="sm"
                          className="h-7"
                          onClick={() => setActiveResultsTab("inspection")}
                          disabled={!selectedNodeData}
                        >
                          Inspection
                        </Button>
                      </div>
                    </div>

                    <div className="flex-1 overflow-y-auto">
                      {activeResultsTab === "output" && (
                        <div className="p-4">
                          {results ? (
                            <div className="space-y-4">
                              <div className="text-sm text-slate-600">
                                {results.summary}
                              </div>

                              {results.type === "cleaning_task_table" && (
                                <div className="border rounded-lg overflow-hidden">
                                  <div className="bg-slate-50 px-4 py-2 border-b">
                                    <h5 className="font-medium text-slate-700 text-sm">
                                      Processed Data: {results.stats.tableName}
                                    </h5>
                                  </div>
                                  <div className="overflow-x-auto">
                                    <Table>
                                      <TableHeader>
                                        <TableRow>
                                          {Object.keys(
                                            results.data[0] || {}
                                          ).map((key) => (
                                            <TableHead
                                              key={key}
                                              className="text-xs whitespace-nowrap"
                                            >
                                              {key
                                                .replace(/_/g, " ")
                                                .toUpperCase()}
                                            </TableHead>
                                          ))}
                                        </TableRow>
                                      </TableHeader>
                                      <TableBody>
                                        {results.data
                                          .slice(0, 50)
                                          .map((row: any, index: number) => (
                                            <TableRow key={index}>
                                              {Object.values(row).map(
                                                (value: any, i: number) => (
                                                  <TableCell
                                                    key={i}
                                                    className="text-xs whitespace-nowrap"
                                                  >
                                                    {value === null ? (
                                                      <span className="text-slate-400 italic">
                                                        null
                                                      </span>
                                                    ) : (
                                                      String(value)
                                                    )}
                                                  </TableCell>
                                                )
                                              )}
                                            </TableRow>
                                          ))}
                                      </TableBody>
                                    </Table>
                                  </div>
                                </div>
                              )}

                              {results.type === "modeling_evaluation" && (
                                <div className="space-y-4">
                                  {/* Summary */}
                                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                                    <h4 className="font-medium text-green-800 mb-2">
                                      Model: {results.data.model}
                                    </h4>
                                    <div className="space-y-1 text-sm text-green-700">
                                      <p>
                                        <strong>Accuracy:</strong>{" "}
                                        {results.data.errorRates.trainingError}%
                                        (Training)
                                      </p>
                                      <p>
                                        <strong>Validation Accuracy:</strong>{" "}
                                        {
                                          results.data.errorRates
                                            .validationError
                                        }
                                        % (Validation)
                                      </p>
                                      <p>
                                        <strong>Test Accuracy:</strong>{" "}
                                        {results.data.errorRates.testError}%
                                        (Test)
                                      </p>
                                      <p>
                                        <strong>Confusion Matrix:</strong>
                                        <pre>
                                          {JSON.stringify(
                                            results.data.confusionMatrix,
                                            null,
                                            2
                                          )}
                                        </pre>
                                      </p>
                                      <p>
                                        <strong>Feature Importance:</strong>
                                        <pre>
                                          {JSON.stringify(
                                            results.data.featureImportance,
                                            null,
                                            2
                                          )}
                                        </pre>
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {results.type === "table_content" && (
                                <div className="space-y-4">
                                  {/* Table Info */}
                                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <h4 className="font-medium text-blue-800 mb-2">
                                      Dataset: {results.table.name}
                                    </h4>
                                    <div className="space-y-1 text-sm text-blue-700">
                                      <p>
                                        • Total rows:{" "}
                                        {results.table.totalRows.toLocaleString()}
                                      </p>
                                      <p>
                                        • Columns:{" "}
                                        {results.table.columns.length}
                                      </p>
                                      <p>
                                        • Sample size:{" "}
                                        {results.table.sampleSize} rows
                                      </p>
                                    </div>
                                  </div>

                                  {/* Table Data */}
                                  <div className="border rounded-lg overflow-hidden">
                                    <div className="bg-slate-50 px-4 py-2 border-b">
                                      <h5 className="font-medium text-slate-700 text-sm">
                                        Sample Data
                                      </h5>
                                    </div>
                                    <div className="overflow-x-auto">
                                      <Table>
                                        <TableHeader>
                                          <TableRow>
                                            {Object.keys(
                                              results.data[0] || {}
                                            ).map((key) => (
                                              <TableHead
                                                key={key}
                                                className="text-xs whitespace-nowrap"
                                              >
                                                {key
                                                  .replace(/_/g, " ")
                                                  .toUpperCase()}
                                              </TableHead>
                                            ))}
                                          </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                          {results.data
                                            .slice(0, 50)
                                            .map((row: any, index: number) => (
                                              <TableRow key={index}>
                                                {Object.values(row).map(
                                                  (value: any, i: number) => (
                                                    <TableCell
                                                      key={i}
                                                      className="text-xs whitespace-nowrap"
                                                    >
                                                      {value === null ? (
                                                        <span className="text-slate-400 italic">
                                                          null
                                                        </span>
                                                      ) : (
                                                        String(value)
                                                      )}
                                                    </TableCell>
                                                  )
                                                )}
                                              </TableRow>
                                            ))}
                                        </TableBody>
                                      </Table>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {results.type === "cleaning_preview" && (
                                <div className="space-y-4">
                                  {/* Preview Info */}
                                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <h4 className="font-medium text-blue-800 mb-2">
                                      Preview: {results.task.description}
                                    </h4>
                                    <div className="space-y-1 text-sm text-blue-700">
                                      <p>• Table: {results.task.tableName}</p>
                                      <p>
                                        • Column:{" "}
                                        {results.task.column || "All rows"}
                                      </p>
                                      <p>
                                        • Affected rows:{" "}
                                        {results.task.affectedRows}/
                                        {results.task.totalRows?.toLocaleString() ||
                                          "N/A"}
                                      </p>
                                      <p>
                                        • Action:{" "}
                                        {results.task.action.replace(/_/g, " ")}
                                      </p>
                                    </div>
                                  </div>

                                  {/* Data Comparison Table */}
                                  <div className="border rounded-lg overflow-hidden">
                                    <div className="bg-slate-50 px-4 py-2 border-b">
                                      <h5 className="font-medium text-slate-700 text-sm">
                                        Data Comparison (Before vs After)
                                      </h5>
                                    </div>
                                    <div className="overflow-x-auto">
                                      <Table>
                                        <TableHeader>
                                          <TableRow>
                                            {Object.keys(
                                              results.data[0] || {}
                                            ).map((key) => {
                                              const isOriginalColumn =
                                                key === results.task.column;
                                              const isProcessedColumn =
                                                key ===
                                                `${results.task.column}_processed`;

                                              return (
                                                <TableHead
                                                  key={key}
                                                  className={`text-xs whitespace-nowrap ${
                                                    isOriginalColumn
                                                      ? "bg-red-100 text-red-800"
                                                      : isProcessedColumn
                                                      ? "bg-green-100 text-green-800"
                                                      : ""
                                                  }`}
                                                >
                                                  {isProcessedColumn
                                                    ? `${results.task.column
                                                        ?.replace(/_/g, " ")
                                                        .toUpperCase()} (AFTER)`
                                                    : key
                                                        .replace(/_/g, " ")
                                                        .toUpperCase()}
                                                  {isOriginalColumn &&
                                                    " (BEFORE)"}
                                                </TableHead>
                                              );
                                            })}
                                          </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                          {results.data
                                            .slice(0, 50)
                                            .map((row: any, index: number) => {
                                              // Check if this row is affected by the cleaning task
                                              const isAffectedRow =
                                                results.task.column &&
                                                row[results.task.column] !==
                                                  row[
                                                    `${results.task.column}_processed`
                                                  ];

                                              return (
                                                <TableRow
                                                  key={index}
                                                  className={
                                                    isAffectedRow
                                                      ? "bg-yellow-50"
                                                      : ""
                                                  }
                                                >
                                                  {Object.entries(row).map(
                                                    ([key, value], i) => {
                                                      const isOriginalColumn =
                                                        key ===
                                                        results.task.column;
                                                      const isProcessedColumn =
                                                        key ===
                                                        `${results.task.column}_processed`;
                                                      const cellChanged =
                                                        isAffectedRow &&
                                                        (isOriginalColumn ||
                                                          isProcessedColumn);

                                                      return (
                                                        <TableCell
                                                          key={i}
                                                          className={`text-xs whitespace-nowrap ${
                                                            cellChanged &&
                                                            isOriginalColumn
                                                              ? "bg-red-200 font-medium"
                                                              : cellChanged &&
                                                                isProcessedColumn
                                                              ? "bg-green-200 font-medium"
                                                              : isOriginalColumn
                                                              ? "bg-red-50"
                                                              : isProcessedColumn
                                                              ? "bg-green-50"
                                                              : ""
                                                          }`}
                                                        >
                                                          {value === null ? (
                                                            <span className="text-slate-400 italic">
                                                              null
                                                            </span>
                                                          ) : (
                                                            String(value)
                                                          )}
                                                        </TableCell>
                                                      );
                                                    }
                                                  )}
                                                </TableRow>
                                              );
                                            })}
                                        </TableBody>
                                      </Table>
                                    </div>

                                    {/* Legend */}
                                    <div className="bg-slate-50 px-4 py-2 border-t">
                                      <div className="flex items-center space-x-4 text-xs">
                                        <div className="flex items-center space-x-1">
                                          <div className="w-3 h-3 bg-red-200 rounded"></div>
                                          <span>Original Data</span>
                                        </div>
                                        <div className="flex items-center space-x-1">
                                          <div className="w-3 h-3 bg-green-200 rounded"></div>
                                          <span>Processed Data</span>
                                        </div>
                                        <div className="flex items-center space-x-1">
                                          <div className="w-3 h-3 bg-yellow-200 rounded"></div>
                                          <span>Affected Rows</span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {results.type === "column_row_operation" && (
                                <div className="space-y-4">
                                  {/* Operation Info */}
                                  <div
                                    className={`${
                                      results.operation.operationDetails
                                        ?.isPreview
                                        ? "bg-blue-50 border border-blue-200"
                                        : "bg-green-50 border border-green-200"
                                    } rounded-lg p-4`}
                                  >
                                    <h4
                                      className={`font-medium ${
                                        results.operation.operationDetails
                                          ?.isPreview
                                          ? "text-blue-800"
                                          : "text-green-800"
                                      } mb-2`}
                                    >
                                      {results.operation.operationDetails
                                        ?.isPreview && "🔍 PREVIEW - "}
                                      {results.operation.tab === "column"
                                        ? "Column"
                                        : "Row"}{" "}
                                      Operation:{" "}
                                      {results.operation.type.replace(
                                        /_/g,
                                        " "
                                      )}
                                      {results.operation.operationDetails
                                        ?.isPreview && " (Not Saved)"}
                                    </h4>
                                    <div
                                      className={`space-y-1 text-sm ${
                                        results.operation.operationDetails
                                          ?.isPreview
                                          ? "text-blue-700"
                                          : "text-green-700"
                                      }`}
                                    >
                                      <p>
                                        • Table: {results.operation.tableName}
                                      </p>
                                      <p>
                                        • Original rows:{" "}
                                        {results.operation.originalRows.toLocaleString()}
                                      </p>
                                      <p>
                                        • Result rows:{" "}
                                        {results.operation.resultRows.toLocaleString()}
                                      </p>
                                      {results.operation.selectedColumns
                                        .length > 0 && (
                                        <p>
                                          • Selected columns:{" "}
                                          {results.operation.selectedColumns.join(
                                            ", "
                                          )}
                                        </p>
                                      )}
                                      {results.operation.filterConditions
                                        .length > 0 && (
                                        <p>
                                          • Filter conditions:{" "}
                                          {
                                            results.operation.filterConditions
                                              .length
                                          }{" "}
                                          applied
                                        </p>
                                      )}
                                      {results.operation.sortColumns.length >
                                        0 && (
                                        <p>
                                          • Sort columns:{" "}
                                          {results.operation.sortColumns
                                            .map(
                                              (s: {
                                                column: string;
                                                direction: string;
                                              }) =>
                                                `${s.column} (${s.direction})`
                                            )
                                            .join(", ")}
                                        </p>
                                      )}

                                      {/* Operation-specific details */}
                                      {results.operation.operationDetails
                                        ?.addedColumn && (
                                        <p>
                                          • Added column: "
                                          {
                                            results.operation.operationDetails
                                              .addedColumn
                                          }
                                          " (
                                          {
                                            results.operation.operationDetails
                                              .columnType
                                          }
                                          )
                                        </p>
                                      )}
                                      {results.operation.operationDetails
                                        ?.renamedFrom && (
                                        <p>
                                          • Renamed: "
                                          {
                                            results.operation.operationDetails
                                              .renamedFrom
                                          }
                                          " → "
                                          {
                                            results.operation.operationDetails
                                              .renamedTo
                                          }
                                          "
                                        </p>
                                      )}
                                      {results.operation.operationDetails
                                        ?.duplicatedColumn && (
                                        <p>
                                          • Duplicated column: "
                                          {
                                            results.operation.operationDetails
                                              .duplicatedColumn
                                          }
                                          " → "
                                          {
                                            results.operation.operationDetails
                                              .duplicatedColumn
                                          }
                                          _copy"
                                        </p>
                                      )}
                                      {results.operation.operationDetails
                                        ?.removedColumns && (
                                        <p>
                                          • Removed columns:{" "}
                                          {results.operation.operationDetails.removedColumns.join(
                                            ", "
                                          )}
                                        </p>
                                      )}
                                      {results.operation.operationDetails
                                        ?.filteredOut && (
                                        <p>
                                          • Filtered out:{" "}
                                          {
                                            results.operation.operationDetails
                                              .filteredOut
                                          }{" "}
                                          rows
                                        </p>
                                      )}
                                    </div>
                                  </div>

                                  {/* Processed Data Table */}
                                  <div className="border rounded-lg overflow-hidden">
                                    <div className="bg-slate-50 px-4 py-2 border-b">
                                      <h5 className="font-medium text-slate-700 text-sm">
                                        Processed Data:{" "}
                                        {results.operation.tableName}
                                      </h5>
                                    </div>
                                    <div className="overflow-x-auto">
                                      <Table>
                                        <TableHeader>
                                          <TableRow>
                                            {Object.keys(
                                              results.data[0] || {}
                                            ).map((key) => (
                                              <TableHead
                                                key={key}
                                                className="text-xs whitespace-nowrap"
                                              >
                                                {key
                                                  .replace(/_/g, " ")
                                                  .toUpperCase()}
                                              </TableHead>
                                            ))}
                                          </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                          {results.data
                                            .slice(0, 50)
                                            .map((row: any, index: number) => (
                                              <TableRow key={index}>
                                                {Object.values(row).map(
                                                  (value: any, i: number) => (
                                                    <TableCell
                                                      key={i}
                                                      className="text-xs whitespace-nowrap"
                                                    >
                                                      {value === null ? (
                                                        <span className="text-slate-400 italic">
                                                          null
                                                        </span>
                                                      ) : (
                                                        String(value)
                                                      )}
                                                    </TableCell>
                                                  )
                                                )}
                                              </TableRow>
                                            ))}
                                        </TableBody>
                                      </Table>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {results.type === "transformation" && (
                                <div className="space-y-4">
                                  {/* Transformation Operation Info */}
                                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                                    <h4 className="font-medium text-orange-800 mb-2">
                                      数据变换:{" "}
                                      {results.operation.type === "group_by"
                                        ? "分组聚合"
                                        : results.operation.type}
                                    </h4>
                                    <div className="space-y-1 text-sm text-orange-700">
                                      <p>
                                        • 数据表: {results.operation.tableName}
                                      </p>
                                      <p>
                                        • 原数据行数:{" "}
                                        {results.operation.originalRows.toLocaleString()}
                                      </p>
                                      <p>
                                        • 结果行数:{" "}
                                        {results.operation.resultRows.toLocaleString()}
                                      </p>

                                      {results.operation.operationDetails
                                        ?.groupByColumns && (
                                        <p>
                                          • 分组列:{" "}
                                          {results.operation.operationDetails.groupByColumns.join(
                                            ", "
                                          )}
                                        </p>
                                      )}

                                      {results.operation.operationDetails
                                        ?.aggregations &&
                                        results.operation.operationDetails
                                          .aggregations.length > 0 && (
                                          <div>
                                            <p className="font-medium">
                                              • 聚合计算:
                                            </p>
                                            <div className="ml-4 space-y-1">
                                              {results.operation.operationDetails.aggregations.map(
                                                (agg: any, index: number) => (
                                                  <p key={index}>
                                                    - {agg.column} →{" "}
                                                    {agg.function.toUpperCase()}
                                                    {agg.alias &&
                                                      ` (as "${agg.alias}")`}
                                                  </p>
                                                )
                                              )}
                                            </div>
                                          </div>
                                        )}
                                    </div>
                                  </div>

                                  {/* Aggregated Data Table */}
                                  <div className="border rounded-lg overflow-hidden">
                                    <div className="bg-slate-50 px-4 py-2 border-b">
                                      <h5 className="font-medium text-slate-700 text-sm">
                                        聚合结果数据:{" "}
                                        {results.operation.tableName}
                                      </h5>
                                      <p className="text-xs text-slate-500 mt-1">
                                        显示前50行分组结果
                                      </p>
                                    </div>
                                    <div className="overflow-x-auto">
                                      <Table>
                                        <TableHeader>
                                          <TableRow>
                                            {Object.keys(
                                              results.data[0] || {}
                                            ).map((key) => {
                                              // Check if this is a group by column or aggregated column
                                              const isGroupByColumn =
                                                results.operation.operationDetails?.groupByColumns?.includes(
                                                  key
                                                );
                                              const isAggregatedColumn =
                                                results.operation.operationDetails?.aggregations?.some(
                                                  (agg: any) =>
                                                    (agg.alias ||
                                                      `${agg.function}_${agg.column}`) ===
                                                    key
                                                );

                                              return (
                                                <TableHead
                                                  key={key}
                                                  className={`text-xs whitespace-nowrap ${
                                                    isGroupByColumn
                                                      ? "bg-blue-100 text-blue-800"
                                                      : isAggregatedColumn
                                                      ? "bg-green-100 text-green-800"
                                                      : ""
                                                  }`}
                                                >
                                                  {key
                                                    .replace(/_/g, " ")
                                                    .toUpperCase()}
                                                  {isGroupByColumn && (
                                                    <span className="ml-1 text-xs bg-blue-200 px-1 rounded">
                                                      分组
                                                    </span>
                                                  )}
                                                  {isAggregatedColumn && (
                                                    <span className="ml-1 text-xs bg-green-200 px-1 rounded">
                                                      聚合
                                                    </span>
                                                  )}
                                                </TableHead>
                                              );
                                            })}
                                          </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                          {results.data
                                            .slice(0, 50)
                                            .map((row: any, index: number) => (
                                              <TableRow key={index}>
                                                {Object.entries(row).map(
                                                  ([key, value], i) => {
                                                    const isGroupByColumn =
                                                      results.operation.operationDetails?.groupByColumns?.includes(
                                                        key
                                                      );
                                                    const isAggregatedColumn =
                                                      results.operation.operationDetails?.aggregations?.some(
                                                        (agg: any) =>
                                                          (agg.alias ||
                                                            `${agg.function}_${agg.column}`) ===
                                                          key
                                                      );

                                                    return (
                                                      <TableCell
                                                        key={i}
                                                        className={`text-xs whitespace-nowrap ${
                                                          isGroupByColumn
                                                            ? "bg-blue-50"
                                                            : isAggregatedColumn
                                                            ? "bg-green-50"
                                                            : ""
                                                        }`}
                                                      >
                                                        {value === null ? (
                                                          <span className="text-slate-400 italic">
                                                            null
                                                          </span>
                                                        ) : typeof value ===
                                                          "number" ? (
                                                          value.toLocaleString()
                                                        ) : (
                                                          String(value)
                                                        )}
                                                      </TableCell>
                                                    );
                                                  }
                                                )}
                                              </TableRow>
                                            ))}
                                        </TableBody>
                                      </Table>
                                    </div>
                                  </div>

                                  {/* Summary Statistics */}
                                  {results.operation.operationDetails
                                    ?.aggregations &&
                                    results.operation.operationDetails
                                      .aggregations.length > 0 && (
                                      <div className="bg-slate-50 border border-slate-200 rounded-lg p-4">
                                        <h5 className="font-medium text-slate-700 text-sm mb-2">
                                          聚合统计摘要
                                        </h5>
                                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-xs">
                                          <div>
                                            <p className="text-slate-600">
                                              原始数据行数
                                            </p>
                                            <p className="font-medium text-lg">
                                              {results.operation.originalRows.toLocaleString()}
                                            </p>
                                          </div>
                                          <div>
                                            <p className="text-slate-600">
                                              分组数量
                                            </p>
                                            <p className="font-medium text-lg">
                                              {results.operation.resultRows.toLocaleString()}
                                            </p>
                                          </div>
                                          <div>
                                            <p className="text-slate-600">
                                              数据压缩比
                                            </p>
                                            <p className="font-medium text-lg">
                                              {(
                                                (1 -
                                                  results.operation.resultRows /
                                                    results.operation
                                                      .originalRows) *
                                                100
                                              ).toFixed(1)}
                                              %
                                            </p>
                                          </div>
                                        </div>
                                      </div>
                                    )}
                                </div>
                              )}
                            </div>
                          ) : (
                            <div className="text-center text-slate-500 mt-8">
                              <BarChart3 className="w-12 h-12 mx-auto mb-2 text-slate-300" />
                              <p>Run a workflow step to see results here</p>
                            </div>
                          )}
                        </div>
                      )}
                      {activeResultsTab === "inspection" && (
                        <DataInspectionPanel />
                      )}
                    </div>
                  </div>
                </ResizablePanel>
              </ResizablePanelGroup>
            </ResizablePanel>

            {/* Right Sidebar - Properties Panel */}
            <ResizableHandle />
            <ResizablePanel
              id="properties"
              order={2}
              defaultSize={30}
              minSize={25}
              maxSize={45}
              className={showPropertiesPanel ? "block" : "hidden"}
            >
              <div className="h-full bg-white border-l border-slate-200 flex flex-col overflow-hidden">
                <div className="p-4 flex-1 overflow-hidden">
                  {selectedNodeData && (
                    <div className="h-full flex flex-col">
                      {/* Operation Info */}
                      <div className="pb-4 border-b border-slate-200 flex-shrink-0">
                        <div className="flex items-center justify-between">
                          <h4 className="font-medium text-base text-slate-900">
                            {selectedNodeData.name}
                          </h4>
                          {selectedNodeData.operationType === "cleaning" && (
                            <Button
                              size="sm"
                              variant="outline"
                              className="ml-2"
                              onClick={runAllCleaningTasks}
                            >
                              Run All
                            </Button>
                          )}
                          {selectedNodeData.operationType === "modeling" && (
                            <Button
                              size="sm"
                              onClick={() =>
                                runModelingOperation(selectedNodeData.id)
                              }
                              className="ml-2"
                              disabled={
                                !isModelingConfigComplete(
                                  modelingConfig[selectedNodeData.id]
                                )
                              }
                            >
                              <Play className="w-3 h-3 mr-1" />
                              Run
                            </Button>
                          )}
                          {selectedNodeData.operationType ===
                            "transformation" && (
                            <Button
                              size="sm"
                              onClick={() =>
                                runTransformationOperation(selectedNodeData.id)
                              }
                              className="ml-2"
                              disabled={(() => {
                                const config =
                                  transformationConfig[selectedNodeData.id];
                                if (!config || !config.operationType)
                                  return true;
                                if (config.operationType === "group_by") {
                                  return (
                                    config.groupByColumns.length === 0 ||
                                    config.aggregations.length === 0
                                  );
                                }
                                return false;
                              })()}
                            >
                              <Play className="w-3 h-3 mr-1" />
                              Run
                            </Button>
                          )}
                        </div>
                        {selectedNodeData.data?.description && (
                          <p className="text-sm text-slate-600 mt-1">
                            {selectedNodeData.data.description}
                          </p>
                        )}
                      </div>

                      {/* Scrollable Content Area */}
                      <div className="flex-1 overflow-y-auto mt-4">
                        {/* Cleaning Operations - Simplified Card Format */}
                        {selectedNodeData.operationType === "cleaning" && (
                          <div className="space-y-3">
                            {(() => {
                              const workflow = tableWorkflows.find((w) =>
                                w.nodes.some(
                                  (n) => n.id === selectedNodeData.id
                                )
                              );
                              const tasks = workflow
                                ? getCleaningTasksForNode(
                                    selectedNodeData.id,
                                    workflow.tableName
                                  )
                                : [];

                              return tasks.map((task) => (
                                <div
                                  key={task.id}
                                  className="border border-slate-200 rounded-lg p-3"
                                >
                                  <div className="flex items-start justify-between mb-2">
                                    <div className="flex items-center space-x-2">
                                      {task.column && (
                                        <span className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded">
                                          {task.column}
                                        </span>
                                      )}
                                      {task.status === "confirmed" && (
                                        <Badge
                                          variant="default"
                                          className="text-xs py-0 px-1"
                                        >
                                          Confirmed
                                        </Badge>
                                      )}
                                      {task.status === "running" && (
                                        <Badge
                                          variant="secondary"
                                          className="text-xs py-0 px-1"
                                        >
                                          Running
                                        </Badge>
                                      )}
                                    </div>

                                    {/* Action Icons */}
                                    <div className="flex items-center space-x-1">
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        className={`h-6 w-6 p-0 ${
                                          viewedTasks[
                                            `${selectedNodeData.id}-${task.id}`
                                          ]
                                            ? "text-slate-400 cursor-not-allowed"
                                            : ""
                                        }`}
                                        onClick={() => {
                                          if (
                                            !viewedTasks[
                                              `${selectedNodeData.id}-${task.id}`
                                            ]
                                          ) {
                                            previewCleaningTask(
                                              selectedNodeData.id,
                                              task.id
                                            );
                                          }
                                        }}
                                        disabled={
                                          viewedTasks[
                                            `${selectedNodeData.id}-${task.id}`
                                          ]
                                        }
                                        title="Preview"
                                      >
                                        <Eye
                                          className={`w-3 h-3 ${
                                            viewedTasks[
                                              `${selectedNodeData.id}-${task.id}`
                                            ]
                                              ? "text-slate-400"
                                              : ""
                                          }`}
                                        />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        className={`h-6 w-6 p-0 ${
                                          task.status === "confirmed"
                                            ? "text-slate-400 cursor-not-allowed"
                                            : ""
                                        }`}
                                        onClick={() => {
                                          if (
                                            task.status !== "confirmed" &&
                                            !(
                                              cleaningTasks[
                                                selectedNodeData.id
                                              ]?.every(
                                                (t) => t.status === "confirmed"
                                              ) ?? false
                                            )
                                          ) {
                                            confirmCleaningTask(
                                              selectedNodeData.id,
                                              task.id
                                            );
                                          }
                                        }}
                                        disabled={
                                          task.status === "confirmed" ||
                                          (cleaningTasks[
                                            selectedNodeData.id
                                          ]?.every(
                                            (t) => t.status === "confirmed"
                                          ) ??
                                            false)
                                        }
                                        title="Confirm"
                                      >
                                        <Check
                                          className={`w-3 h-3 ${
                                            task.status === "confirmed"
                                              ? "text-green-600"
                                              : ""
                                          }`}
                                        />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        className={`h-6 w-6 p-0 ${
                                          task.status === "confirmed"
                                            ? "text-slate-400 cursor-not-allowed"
                                            : "text-red-500 hover:text-red-700"
                                        }`}
                                        onClick={() => {
                                          if (task.status !== "confirmed") {
                                            deleteCleaningTask(
                                              selectedNodeData.id,
                                              task.id
                                            );
                                          }
                                        }}
                                        disabled={task.status === "confirmed"}
                                        title={
                                          task.status === "confirmed"
                                            ? "Cannot delete confirmed task"
                                            : "Delete"
                                        }
                                      >
                                        <Trash2
                                          className={`w-3 h-3 ${
                                            task.status === "confirmed"
                                              ? "text-slate-400"
                                              : ""
                                          }`}
                                        />
                                      </Button>
                                    </div>
                                  </div>

                                  <div className="w-full">
                                    <h6 className="font-medium text-slate-700 text-sm mb-1">
                                      {task.description}
                                    </h6>
                                    <p className="text-xs text-slate-500 mb-2">
                                      {task.detail}
                                    </p>

                                    {/* Value Configuration for tasks that need values */}
                                    {task.needsValue && (
                                      <div className="mt-2">
                                        <div className="flex items-center space-x-2">
                                          <Label className="text-xs font-medium text-slate-600">
                                            Value:
                                          </Label>
                                          {task.isEditing ? (
                                            task.valueType === "dropdown" ? (
                                              <Select
                                                value={task.userValue}
                                                onValueChange={(value) => {
                                                  updateTaskValue(
                                                    selectedNodeData.id,
                                                    task.id,
                                                    value
                                                  );
                                                  toggleTaskEditing(
                                                    selectedNodeData.id,
                                                    task.id
                                                  );
                                                }}
                                              >
                                                <SelectTrigger className="text-xs h-6 w-32">
                                                  <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                  {task.options?.map(
                                                    (option: string) => (
                                                      <SelectItem
                                                        key={option}
                                                        value={option}
                                                      >
                                                        {option}
                                                      </SelectItem>
                                                    )
                                                  )}
                                                </SelectContent>
                                              </Select>
                                            ) : (
                                              <Input
                                                value={task.userValue}
                                                onChange={(e) =>
                                                  updateTaskValue(
                                                    selectedNodeData.id,
                                                    task.id,
                                                    e.target.value
                                                  )
                                                }
                                                onBlur={() =>
                                                  toggleTaskEditing(
                                                    selectedNodeData.id,
                                                    task.id
                                                  )
                                                }
                                                onKeyDown={(e) => {
                                                  if (e.key === "Enter") {
                                                    toggleTaskEditing(
                                                      selectedNodeData.id,
                                                      task.id
                                                    );
                                                  }
                                                }}
                                                className="text-xs h-6 w-32"
                                                autoFocus
                                              />
                                            )
                                          ) : (
                                            <div
                                              className="text-xs bg-slate-100 px-2 py-1 rounded cursor-pointer hover:bg-slate-200 flex items-center space-x-1"
                                              onClick={() =>
                                                toggleTaskEditing(
                                                  selectedNodeData.id,
                                                  task.id
                                                )
                                              }
                                            >
                                              <span>{task.userValue}</span>
                                              <Edit className="w-2 h-2" />
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              ));
                            })()}
                          </div>
                        )}

                        {/* Modeling Operations */}
                        {selectedNodeData.operationType === "modeling" && (
                          <div className="space-y-4">
                            {(() => {
                              const config = modelingConfig[
                                selectedNodeData.id
                              ] || {
                                target: "",
                                preferences: {
                                  accuracyVsRobustness: "",
                                  complexityVsSimplicity: "",
                                  speedVsAccuracy: "",
                                },
                                recommendedModel: "",
                                modelParameters: {},
                                features: [],
                              };

                              const workflow = tableWorkflows.find((w) =>
                                w.nodes.some(
                                  (n) => n.id === selectedNodeData.id
                                )
                              );
                              const columns =
                                workflow?.tableData?.columns || [];

                              // Get recommended model based on current preferences
                              const recommendedModel = config.preferences
                                .accuracyVsRobustness
                                ? getRecommendedModel(config.preferences)
                                : null;

                              return (
                                <>
                                  {/* 1. Target Selection */}
                                  <div className="space-y-2">
                                    <h6 className="font-medium text-slate-700 text-sm">
                                      1. Target
                                    </h6>
                                    <Select
                                      value={config.target}
                                      onValueChange={(value) =>
                                        updateModelingConfig(
                                          selectedNodeData.id,
                                          { target: value }
                                        )
                                      }
                                    >
                                      <SelectTrigger className="text-sm">
                                        <SelectValue placeholder="Select target column" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        {columns.map((column) => (
                                          <SelectItem
                                            key={column.name}
                                            value={column.name}
                                          >
                                            <div className="flex flex-col">
                                              <span className="font-medium">
                                                {column.name}
                                              </span>
                                              <span className="text-xs text-slate-500">
                                                {column.description}
                                              </span>
                                            </div>
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  </div>

                                  {/* 2. Preferences */}
                                  <div className="space-y-3">
                                    <h6 className="font-medium text-slate-700 text-sm">
                                      2. Preferences
                                    </h6>

                                    {/* Accuracy vs Robustness */}
                                    <div>
                                      <Label className="text-xs font-medium text-slate-600 mb-2 block">
                                        Accuracy vs Robustness
                                      </Label>
                                      <div className="grid grid-cols-2 gap-2">
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .accuracyVsRobustness ===
                                            "accuracy"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  accuracyVsRobustness:
                                                    "accuracy",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Accuracy
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Higher precision, may overfit
                                          </div>
                                        </div>
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .accuracyVsRobustness ===
                                            "robustness"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  accuracyVsRobustness:
                                                    "robustness",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Robustness
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Better generalization
                                          </div>
                                        </div>
                                      </div>
                                    </div>

                                    {/* Complexity vs Simplicity */}
                                    <div>
                                      <Label className="text-xs font-medium text-slate-600 mb-2 block">
                                        Complexity vs Simplicity
                                      </Label>
                                      <div className="grid grid-cols-2 gap-2">
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .complexityVsSimplicity ===
                                            "complexity"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  complexityVsSimplicity:
                                                    "complexity",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Complexity
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Advanced algorithms
                                          </div>
                                        </div>
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .complexityVsSimplicity ===
                                            "simplicity"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  complexityVsSimplicity:
                                                    "simplicity",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Simplicity
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Easy to interpret
                                          </div>
                                        </div>
                                      </div>
                                    </div>

                                    {/* Speed vs Accuracy */}
                                    <div>
                                      <Label className="text-xs font-medium text-slate-600 mb-2 block">
                                        Speed vs Accuracy
                                      </Label>
                                      <div className="grid grid-cols-2 gap-2">
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .speedVsAccuracy === "speed"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  speedVsAccuracy: "speed",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Speed
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Fast training & prediction
                                          </div>
                                        </div>
                                        <div
                                          className={`p-2 border rounded-lg cursor-pointer transition-colors ${
                                            config.preferences
                                              .speedVsAccuracy === "accuracy"
                                              ? "border-blue-500 bg-blue-50"
                                              : "border-slate-200 hover:border-slate-300"
                                          }`}
                                          onClick={() =>
                                            updateModelingConfig(
                                              selectedNodeData.id,
                                              {
                                                preferences: {
                                                  ...config.preferences,
                                                  speedVsAccuracy: "accuracy",
                                                },
                                              }
                                            )
                                          }
                                        >
                                          <div className="text-xs font-medium">
                                            Accuracy
                                          </div>
                                          <div className="text-xs text-slate-500 mt-1">
                                            Better predictions
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                  {/* 3. Recommended Model */}
                                  {recommendedModel && (
                                    <div className="space-y-2">
                                      <h6 className="font-medium text-slate-700 text-sm">
                                        3. Recommended Model
                                      </h6>
                                      <div className="bg-blue-50 p-3 rounded border-l-2 border-blue-200">
                                        <p className="text-sm font-medium text-blue-800">
                                          {recommendedModel.name}
                                        </p>
                                        <p className="text-xs text-blue-600 mt-1">
                                          Based on your preferences, we
                                          recommend this model for optimal
                                          performance.
                                        </p>
                                      </div>

                                      {/* Model Parameters */}
                                      {recommendedModel.needsParams && (
                                        <div className="space-y-2 mt-3">
                                          <Label className="text-xs font-medium text-slate-600">
                                            Parameters
                                          </Label>
                                          {recommendedModel.name ===
                                            "Random Forest" && (
                                            <div className="grid grid-cols-2 gap-2">
                                              <div>
                                                <Label className="text-xs text-slate-500">
                                                  Trees
                                                </Label>
                                                <Input
                                                  type="number"
                                                  defaultValue="100"
                                                  className="text-xs h-7"
                                                />
                                              </div>
                                              <div>
                                                <Label className="text-xs text-slate-500">
                                                  Max Depth
                                                </Label>
                                                <Input
                                                  type="number"
                                                  defaultValue="10"
                                                  className="text-xs h-7"
                                                />
                                              </div>
                                            </div>
                                          )}
                                          {recommendedModel.name ===
                                            "XGBoost" && (
                                            <div className="grid grid-cols-2 gap-2">
                                              <div>
                                                <Label className="text-xs text-slate-500">
                                                  Learning Rate
                                                </Label>
                                                <Input
                                                  type="number"
                                                  step="0.01"
                                                  defaultValue="0.1"
                                                  className="text-xs h-7"
                                                />
                                              </div>
                                              <div>
                                                <Label className="text-xs text-slate-500">
                                                  Max Depth
                                                </Label>
                                                <Input
                                                  type="number"
                                                  defaultValue="6"
                                                  className="text-xs h-7"
                                                />
                                              </div>
                                            </div>
                                          )}
                                          {recommendedModel.name ===
                                            "Decision Tree" && (
                                            <div>
                                              <Label className="text-xs text-slate-500">
                                                Max Depth
                                              </Label>
                                              <Input
                                                type="number"
                                                defaultValue="5"
                                                className="text-xs h-7"
                                              />
                                            </div>
                                          )}
                                        </div>
                                      )}
                                    </div>
                                  )}

                                  {/* 4. Feature Selection */}
                                  <div className="space-y-2">
                                    <h6 className="font-medium text-slate-700 text-sm">
                                      4. Relevant Features
                                    </h6>
                                    <div className="bg-slate-50 border rounded-lg p-3">
                                      <div className="space-y-2">
                                        {columns
                                          .filter(
                                            (col) => col.name !== config.target
                                          )
                                          .map((column) => (
                                            <div
                                              key={column.name}
                                              className={`flex items-start space-x-3 p-2 rounded border cursor-pointer transition-colors ${
                                                config.features.includes(
                                                  column.name
                                                )
                                                  ? "border-blue-500 bg-blue-50"
                                                  : "border-slate-200 hover:border-slate-300 bg-white"
                                              }`}
                                              onClick={() => {
                                                const newFeatures =
                                                  config.features.includes(
                                                    column.name
                                                  )
                                                    ? config.features.filter(
                                                        (f) => f !== column.name
                                                      )
                                                    : [
                                                        ...config.features,
                                                        column.name,
                                                      ];
                                                updateModelingConfig(
                                                  selectedNodeData.id,
                                                  { features: newFeatures }
                                                );
                                              }}
                                            >
                                              <Checkbox
                                                id={`feature-${column.name}`}
                                                checked={config.features.includes(
                                                  column.name
                                                )}
                                                className="mt-0.5"
                                              />
                                              <div className="flex-1">
                                                <Label
                                                  htmlFor={`feature-${column.name}`}
                                                  className="text-xs font-medium cursor-pointer"
                                                >
                                                  {column.name}
                                                </Label>
                                                <p className="text-xs text-slate-500 mt-1">
                                                  {column.description}
                                                </p>
                                              </div>
                                            </div>
                                          ))}
                                      </div>
                                      {columns.filter(
                                        (col) => col.name !== config.target
                                      ).length === 0 && (
                                        <p className="text-xs text-slate-500 text-center">
                                          Please select a target column first
                                        </p>
                                      )}
                                    </div>
                                  </div>
                                </>
                              );
                            })()}
                          </div>
                        )}

                        {/* Column/Row Operations with Tabs */}
                        {selectedNodeData.operationType ===
                          "column_row_operation" && (
                          <div className="space-y-4">
                            {(() => {
                              const config = columnRowConfig[
                                selectedNodeData.id
                              ] || {
                                activeTab: "column" as const,
                                selectedColumns: [],
                                selectedRows: [],
                                operationType: "",
                                filterConditions: [],
                                sortColumns: [],
                                newColumnName: "",
                                newColumnType: "",
                                combineColumns: [],
                                combineSeparator: "",
                                splitColumn: "",
                                splitNewColumns: [],
                              };

                              const workflow = tableWorkflows.find((w) =>
                                w.nodes.some(
                                  (n) => n.id === selectedNodeData.id
                                )
                              );
                              const columns =
                                workflow?.tableData?.columns || [];

                              return (
                                <>
                                  {/* Tab Selection */}
                                  <div className="flex bg-slate-100 p-1 rounded-lg">
                                    <Button
                                      variant={
                                        config.activeTab === "column"
                                          ? "default"
                                          : "ghost"
                                      }
                                      size="sm"
                                      className="flex-1 h-8"
                                      onClick={() =>
                                        setColumnRowConfig((prev) => ({
                                          ...prev,
                                          [selectedNodeData.id]: {
                                            ...config,
                                            activeTab: "column",
                                          },
                                        }))
                                      }
                                    >
                                      Column Operations
                                    </Button>
                                    <Button
                                      variant={
                                        config.activeTab === "row"
                                          ? "default"
                                          : "ghost"
                                      }
                                      size="sm"
                                      className="flex-1 h-8"
                                      onClick={() =>
                                        setColumnRowConfig((prev) => ({
                                          ...prev,
                                          [selectedNodeData.id]: {
                                            ...config,
                                            activeTab: "row",
                                          },
                                        }))
                                      }
                                    >
                                      Row Operations
                                    </Button>
                                  </div>

                                  {/* Operation Type Selection */}
                                  <div>
                                    <Label className="text-sm font-medium mb-2 block">
                                      Select{" "}
                                      {config.activeTab === "column"
                                        ? "Column"
                                        : "Row"}{" "}
                                      Operation
                                    </Label>
                                    <Select
                                      value={config.operationType}
                                      onValueChange={(value) => {
                                        setColumnRowConfig((prev) => ({
                                          ...prev,
                                          [selectedNodeData.id]: {
                                            ...config,
                                            operationType: value,
                                          },
                                        }));
                                      }}
                                    >
                                      <SelectTrigger>
                                        <SelectValue
                                          placeholder={`Choose ${config.activeTab} operation`}
                                        />
                                      </SelectTrigger>
                                      <SelectContent>
                                        {secondaryOperations.column_row_operation[
                                          config.activeTab
                                        ].map((operation) => (
                                          <SelectItem
                                            key={operation.id}
                                            value={operation.id}
                                          >
                                            {operation.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  </div>

                                  {/* Column Operation Configurations */}
                                  {config.activeTab === "column" &&
                                    config.operationType && (
                                      <div className="space-y-4">
                                        {/* Combine Column */}
                                        {config.operationType ===
                                          "combine_column" && (
                                          <div className="space-y-3">
                                            <div>
                                              <Label className="text-sm font-medium mb-2 block">
                                                Select Columns to Combine
                                              </Label>
                                              <div className="space-y-2">
                                                {columns.map((column) => (
                                                  <div
                                                    key={column.name}
                                                    className="flex items-center space-x-2"
                                                  >
                                                    <input
                                                      type="checkbox"
                                                      id={`combine-${column.name}`}
                                                      checked={
                                                        config.combineColumns?.includes(
                                                          column.name
                                                        ) || false
                                                      }
                                                      onChange={(e) => {
                                                        const currentColumns =
                                                          config.combineColumns ||
                                                          [];
                                                        const newColumns = e
                                                          .target.checked
                                                          ? [
                                                              ...currentColumns,
                                                              column.name,
                                                            ]
                                                          : currentColumns.filter(
                                                              (col) =>
                                                                col !==
                                                                column.name
                                                            );

                                                        setColumnRowConfig(
                                                          (prev) => ({
                                                            ...prev,
                                                            [selectedNodeData.id]:
                                                              {
                                                                ...config,
                                                                combineColumns:
                                                                  newColumns,
                                                              },
                                                          })
                                                        );
                                                      }}
                                                      className="rounded"
                                                    />
                                                    <label
                                                      htmlFor={`combine-${column.name}`}
                                                      className="text-sm"
                                                    >
                                                      {column.name} (
                                                      {column.type})
                                                    </label>
                                                  </div>
                                                ))}
                                              </div>
                                              {config.combineColumns &&
                                                config.combineColumns.length >
                                                  0 && (
                                                  <div className="mt-2 p-2 bg-blue-50 rounded-md">
                                                    <p className="text-xs text-blue-600">
                                                      Selected:{" "}
                                                      {config.combineColumns.join(
                                                        ", "
                                                      )}
                                                    </p>
                                                    <p className="text-xs text-blue-500 mt-1">
                                                      Preview:{" "}
                                                      {config.combineColumns
                                                        .map((col) => {
                                                          // Demo data for Amazon Sales Report
                                                          if (col === "Style")
                                                            return "SET389";
                                                          if (col === "Size")
                                                            return "S";
                                                          return `${col}_value`;
                                                        })
                                                        .join("-")}
                                                    </p>
                                                  </div>
                                                )}
                                            </div>
                                            <div>
                                              <Label className="text-sm font-medium mb-2 block">
                                                New Column Name
                                              </Label>
                                              <Input
                                                placeholder="e.g., Style_Size"
                                                value={
                                                  config.newColumnName || ""
                                                }
                                                onChange={(e) =>
                                                  setColumnRowConfig(
                                                    (prev) => ({
                                                      ...prev,
                                                      [selectedNodeData.id]: {
                                                        ...config,
                                                        newColumnName:
                                                          e.target.value,
                                                      },
                                                    })
                                                  )
                                                }
                                              />
                                            </div>
                                          </div>
                                        )}

                                        {/* Split Column */}
                                        {config.operationType ===
                                          "split_column" && (
                                          <div className="space-y-3">
                                            <div>
                                              <Label className="text-sm font-medium mb-2 block">
                                                Select Column to Split
                                              </Label>
                                              <Select
                                                value={config.splitColumn || ""}
                                                onValueChange={(value) =>
                                                  setColumnRowConfig(
                                                    (prev) => ({
                                                      ...prev,
                                                      [selectedNodeData.id]: {
                                                        ...config,
                                                        splitColumn: value,
                                                      },
                                                    })
                                                  )
                                                }
                                              >
                                                <SelectTrigger>
                                                  <SelectValue placeholder="Choose column" />
                                                </SelectTrigger>
                                                <SelectContent>
                                                  {columns.map((column) => (
                                                    <SelectItem
                                                      key={column.name}
                                                      value={column.name}
                                                    >
                                                      {column.name} (
                                                      {column.type})
                                                    </SelectItem>
                                                  ))}
                                                </SelectContent>
                                              </Select>
                                              {config.splitColumn ===
                                                "Date" && (
                                                <div className="mt-2 p-2 bg-green-50 rounded-md">
                                                  <p className="text-xs text-green-600">
                                                    Demo: Splitting "04-01-2022"
                                                    → Month: "04", Day: "01",
                                                    Year: "2022"
                                                  </p>
                                                </div>
                                              )}
                                            </div>
                                            <div>
                                              <Label className="text-sm font-medium mb-2 block">
                                                New Column Names
                                              </Label>
                                              <div className="space-y-2">
                                                {(
                                                  config.splitNewColumns || []
                                                ).map((colName, index) => (
                                                  <div
                                                    key={index}
                                                    className="flex items-center space-x-2"
                                                  >
                                                    <Input
                                                      placeholder={`Column ${
                                                        index + 1
                                                      } name`}
                                                      value={colName}
                                                      onChange={(e) => {
                                                        const newColumns = [
                                                          ...(config.splitNewColumns ||
                                                            []),
                                                        ];
                                                        newColumns[index] =
                                                          e.target.value;
                                                        setColumnRowConfig(
                                                          (prev) => ({
                                                            ...prev,
                                                            [selectedNodeData.id]:
                                                              {
                                                                ...config,
                                                                splitNewColumns:
                                                                  newColumns,
                                                              },
                                                          })
                                                        );
                                                      }}
                                                      className="flex-1"
                                                    />
                                                    <Button
                                                      size="sm"
                                                      variant="ghost"
                                                      onClick={() => {
                                                        const newColumns = (
                                                          config.splitNewColumns ||
                                                          []
                                                        ).filter(
                                                          (_, i) => i !== index
                                                        );
                                                        setColumnRowConfig(
                                                          (prev) => ({
                                                            ...prev,
                                                            [selectedNodeData.id]:
                                                              {
                                                                ...config,
                                                                splitNewColumns:
                                                                  newColumns,
                                                              },
                                                          })
                                                        );
                                                      }}
                                                      className="p-1 h-8 w-8"
                                                    >
                                                      <X className="w-4 h-4" />
                                                    </Button>
                                                  </div>
                                                ))}
                                                <Button
                                                  size="sm"
                                                  variant="outline"
                                                  onClick={() => {
                                                    const currentColumns =
                                                      config.splitNewColumns ||
                                                      [];
                                                    const newColumns = [
                                                      ...currentColumns,
                                                      "",
                                                    ];
                                                    setColumnRowConfig(
                                                      (prev) => ({
                                                        ...prev,
                                                        [selectedNodeData.id]: {
                                                          ...config,
                                                          splitNewColumns:
                                                            newColumns,
                                                        },
                                                      })
                                                    );
                                                  }}
                                                  className="w-full border-dashed"
                                                >
                                                  <Plus className="w-4 h-4 mr-2" />
                                                  Add Column
                                                </Button>
                                                {config.splitColumn ===
                                                  "Date" &&
                                                  (config.splitNewColumns || [])
                                                    .length === 0 && (
                                                    <Button
                                                      size="sm"
                                                      variant="outline"
                                                      onClick={() => {
                                                        setColumnRowConfig(
                                                          (prev) => ({
                                                            ...prev,
                                                            [selectedNodeData.id]:
                                                              {
                                                                ...config,
                                                                splitNewColumns:
                                                                  [
                                                                    "Month",
                                                                    "Day",
                                                                    "Year",
                                                                  ],
                                                              },
                                                          })
                                                        );
                                                      }}
                                                      className="w-full bg-green-50 border-green-200 text-green-700"
                                                    >
                                                      Use Date Template (Month,
                                                      Day, Year)
                                                    </Button>
                                                  )}
                                              </div>
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    )}

                                  {/* Row Operation Configurations */}
                                  {config.activeTab === "row" && (
                                    <div className="space-y-4">
                                      {/* Filter Conditions for Filter Rows */}
                                      {config.operationType ===
                                        "filter_rows" && (
                                        <div>
                                          <Label className="text-sm font-medium mb-2 block">
                                            Filter Conditions
                                          </Label>
                                          <div className="space-y-2">
                                            {config.filterConditions.map(
                                              (condition, index) => (
                                                <div
                                                  key={index}
                                                  className="flex space-x-2 items-center"
                                                >
                                                  <Select
                                                    value={condition.column}
                                                    onValueChange={(value) => {
                                                      const newConditions = [
                                                        ...config.filterConditions,
                                                      ];
                                                      newConditions[index] = {
                                                        ...condition,
                                                        column: value,
                                                      };
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              filterConditions:
                                                                newConditions,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <SelectTrigger className="w-32">
                                                      <SelectValue placeholder="Column" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                      {columns.map((col) => (
                                                        <SelectItem
                                                          key={col.name}
                                                          value={col.name}
                                                        >
                                                          {col.name} ({col.type}
                                                          )
                                                        </SelectItem>
                                                      ))}
                                                    </SelectContent>
                                                  </Select>
                                                  <Select
                                                    value={condition.operator}
                                                    onValueChange={(value) => {
                                                      const newConditions = [
                                                        ...config.filterConditions,
                                                      ];
                                                      newConditions[index] = {
                                                        ...condition,
                                                        operator: value,
                                                      };
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              filterConditions:
                                                                newConditions,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <SelectTrigger className="w-24">
                                                      <SelectValue placeholder="Op" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                      <SelectItem value="equals">
                                                        =
                                                      </SelectItem>
                                                      <SelectItem value="not_equals">
                                                        ≠
                                                      </SelectItem>
                                                      <SelectItem value="greater">
                                                        &gt;
                                                      </SelectItem>
                                                      <SelectItem value="less">
                                                        &lt;
                                                      </SelectItem>
                                                      <SelectItem value="contains">
                                                        Contains
                                                      </SelectItem>
                                                    </SelectContent>
                                                  </Select>
                                                  <Input
                                                    placeholder="Value"
                                                    className="flex-1"
                                                    value={condition.value}
                                                    onChange={(e) => {
                                                      const newConditions = [
                                                        ...config.filterConditions,
                                                      ];
                                                      newConditions[index] = {
                                                        ...condition,
                                                        value: e.target.value,
                                                      };
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              filterConditions:
                                                                newConditions,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  />
                                                  <Button
                                                    size="sm"
                                                    variant="ghost"
                                                    className="p-1 h-8 w-8"
                                                    onClick={() => {
                                                      const newConditions =
                                                        config.filterConditions.filter(
                                                          (_, i) => i !== index
                                                        );
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              filterConditions:
                                                                newConditions,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <X className="w-4 h-4" />
                                                  </Button>
                                                </div>
                                              )
                                            )}
                                            <Button
                                              size="sm"
                                              variant="outline"
                                              onClick={() => {
                                                const newConditions = [
                                                  ...config.filterConditions,
                                                  {
                                                    column: "",
                                                    operator: "",
                                                    value: "",
                                                  },
                                                ];
                                                setColumnRowConfig((prev) => ({
                                                  ...prev,
                                                  [selectedNodeData.id]: {
                                                    ...config,
                                                    filterConditions:
                                                      newConditions,
                                                  },
                                                }));
                                              }}
                                            >
                                              <Plus className="w-4 h-4 mr-1" />
                                              Add Condition
                                            </Button>
                                          </div>
                                        </div>
                                      )}

                                      {/* Sort Configuration for Sort Rows */}
                                      {config.operationType === "sort_rows" && (
                                        <div>
                                          <Label className="text-sm font-medium mb-2 block">
                                            Sort Configuration
                                          </Label>
                                          <div className="space-y-2">
                                            {config.sortColumns.map(
                                              (sortCol, index) => (
                                                <div
                                                  key={index}
                                                  className="flex space-x-2 items-center"
                                                >
                                                  <Select
                                                    value={sortCol.column}
                                                    onValueChange={(value) => {
                                                      const newSortColumns = [
                                                        ...config.sortColumns,
                                                      ];
                                                      newSortColumns[index] = {
                                                        ...sortCol,
                                                        column: value,
                                                      };
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              sortColumns:
                                                                newSortColumns,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <SelectTrigger className="flex-1">
                                                      <SelectValue placeholder="Select column" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                      {columns.map((col) => (
                                                        <SelectItem
                                                          key={col.name}
                                                          value={col.name}
                                                        >
                                                          {col.name} ({col.type}
                                                          )
                                                        </SelectItem>
                                                      ))}
                                                    </SelectContent>
                                                  </Select>
                                                  <Select
                                                    value={sortCol.direction}
                                                    onValueChange={(
                                                      value: "asc" | "desc"
                                                    ) => {
                                                      const newSortColumns = [
                                                        ...config.sortColumns,
                                                      ];
                                                      newSortColumns[index] = {
                                                        ...sortCol,
                                                        direction: value,
                                                      };
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              sortColumns:
                                                                newSortColumns,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <SelectTrigger className="w-32">
                                                      <SelectValue placeholder="Order" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                      <SelectItem value="asc">
                                                        Ascending
                                                      </SelectItem>
                                                      <SelectItem value="desc">
                                                        Descending
                                                      </SelectItem>
                                                    </SelectContent>
                                                  </Select>
                                                  <Button
                                                    size="sm"
                                                    variant="ghost"
                                                    className="p-1 h-8 w-8"
                                                    onClick={() => {
                                                      const newSortColumns =
                                                        config.sortColumns.filter(
                                                          (_, i) => i !== index
                                                        );
                                                      setColumnRowConfig(
                                                        (prev) => ({
                                                          ...prev,
                                                          [selectedNodeData.id]:
                                                            {
                                                              ...config,
                                                              sortColumns:
                                                                newSortColumns,
                                                            },
                                                        })
                                                      );
                                                    }}
                                                  >
                                                    <X className="w-4 h-4" />
                                                  </Button>
                                                </div>
                                              )
                                            )}
                                            <Button
                                              size="sm"
                                              variant="outline"
                                              onClick={() => {
                                                const newSortColumns = [
                                                  ...config.sortColumns,
                                                  {
                                                    column: "",
                                                    direction: "asc" as const,
                                                  },
                                                ];
                                                setColumnRowConfig((prev) => ({
                                                  ...prev,
                                                  [selectedNodeData.id]: {
                                                    ...config,
                                                    sortColumns: newSortColumns,
                                                  },
                                                }));
                                              }}
                                            >
                                              <Plus className="w-4 h-4 mr-1" />
                                              Add Sort Column
                                            </Button>
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  )}
                                </>
                              );
                            })()}
                          </div>
                        )}

                        {/* Other operation types with standard selection */}
                        {selectedNodeData.operationType &&
                          selectedNodeData.operationType !== "cleaning" &&
                          selectedNodeData.operationType !== "modeling" &&
                          selectedNodeData.operationType !==
                            "column_row_operation" &&
                          secondaryOperations[
                            selectedNodeData.operationType as keyof typeof secondaryOperations
                          ] && (
                            <div className="space-y-4">
                              <div>
                                <Label className="text-sm font-medium mb-2 block">
                                  Select Operation
                                </Label>
                                <Select
                                  value={
                                    selectedNodeData.secondaryOperation || ""
                                  }
                                  onValueChange={(value) => {
                                    updateNodeConfig(selectedNodeData.id, {
                                      secondaryOperation: value,
                                    });
                                    setTableWorkflows((prev) =>
                                      prev.map((workflow) => ({
                                        ...workflow,
                                        nodes: workflow.nodes.map((node) =>
                                          node.id === selectedNodeData.id
                                            ? {
                                                ...node,
                                                secondaryOperation: value,
                                              }
                                            : node
                                        ),
                                      }))
                                    );
                                  }}
                                >
                                  <SelectTrigger>
                                    <SelectValue placeholder="Choose operation type" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {(
                                      secondaryOperations[
                                        selectedNodeData.operationType as keyof typeof secondaryOperations
                                      ] as Array<{
                                        id: string;
                                        name: string;
                                        description: string;
                                      }>
                                    ).map((operation) => (
                                      <SelectItem
                                        key={operation.id}
                                        value={operation.id}
                                      >
                                        {operation.name}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>
                          )}
                      </div>

                      {/* Apply & Run Button for Column/Row Operations */}
                      {selectedNodeData.operationType ===
                        "column_row_operation" && (
                        <div className="pt-4 border-t flex-shrink-0 flex items-center space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            className="p-2"
                            onClick={() =>
                              previewColumnRowOperation(selectedNodeData.id)
                            }
                          >
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            className="w-full"
                            onClick={() =>
                              runColumnRowOperation(selectedNodeData.id)
                            }
                            disabled={(() => {
                              const config =
                                columnRowConfig[selectedNodeData.id];
                              if (!config || !config.operationType) return true;

                              if (config.activeTab === "column") {
                                if (config.operationType === "combine_column") {
                                  return (
                                    !config.newColumnName ||
                                    !config.combineColumns ||
                                    config.combineColumns.length < 2
                                  );
                                } else if (
                                  config.operationType === "split_column"
                                ) {
                                  return (
                                    !config.splitColumn ||
                                    !config.splitNewColumns ||
                                    config.splitNewColumns.length < 2
                                  );
                                } else if (
                                  config.operationType === "rename_column"
                                ) {
                                  return (
                                    config.selectedColumns.length === 0 ||
                                    !config.newColumnName
                                  );
                                } else {
                                  return config.selectedColumns.length === 0;
                                }
                              } else if (config.activeTab === "row") {
                                if (config.operationType === "filter_rows") {
                                  return (
                                    config.filterConditions.length === 0 ||
                                    config.filterConditions.some(
                                      (c) =>
                                        !c.column || !c.operator || !c.value
                                    )
                                  );
                                } else if (
                                  config.operationType === "sort_rows"
                                ) {
                                  return (
                                    config.sortColumns.length === 0 ||
                                    config.sortColumns.some((c) => !c.column)
                                  );
                                }
                              }
                              return false;
                            })()}
                          >
                            Apply & Run
                          </Button>
                        </div>
                      )}

                      {/* Apply & Run Button - Fixed at bottom */}
                      {selectedNodeData.operationType !== "cleaning" &&
                        selectedNodeData.operationType !== "modeling" &&
                        selectedNodeData.operationType !==
                          "column_row_operation" && (
                          <div className="pt-4 border-t flex-shrink-0">
                            <Button
                              size="sm"
                              className="w-full"
                              onClick={applyConfigurationAndRun}
                            >
                              Apply & Run
                            </Button>
                          </div>
                        )}
                    </div>
                  )}
                </div>
              </div>
            </ResizablePanel>
          </ResizablePanelGroup>
        </div>
      </div>

      {/* Add Node Dialog */}
      <Dialog open={showAddNodeDialog} onOpenChange={setShowAddNodeDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Add Operation</DialogTitle>
            <DialogDescription>
              Choose an operation to add to your workflow
            </DialogDescription>
          </DialogHeader>
          <div className="grid grid-cols-2 gap-4 py-4">
            {primaryOperations.map((operation) => {
              const IconComponent = operation.icon;
              return (
                <Card
                  key={operation.id}
                  className="cursor-pointer hover:shadow-md transition-shadow"
                  onClick={() => addOperationNode(operation, addNodeAfter!)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <div
                        className={`w-8 h-8 rounded-lg ${operation.color} flex items-center justify-center`}
                      >
                        <IconComponent className="w-4 h-4 text-white" />
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">
                          {operation.name}
                        </h4>
                        <p className="text-xs text-slate-500">
                          {operation.description}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </DialogContent>
      </Dialog>

      {/* Add Custom Task Dialog */}
      <Dialog open={showAddTaskDialog} onOpenChange={setShowAddTaskDialog}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Add Custom Cleaning Task</DialogTitle>
            <DialogDescription>
              Add a custom task to {addTaskCategory.replace(/_/g, " ")} category
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div>
              <Label className="text-sm font-medium mb-2 block">
                Select Column
              </Label>
              <Select value={newTaskColumn} onValueChange={setNewTaskColumn}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose column to process" />
                </SelectTrigger>
                <SelectContent>
                  {(() => {
                    const workflow = tableWorkflows.find((w) =>
                      w.nodes.some((n) => n.id === currentNodeId)
                    );
                    const tableData = workflow?.tableData;
                    return (
                      tableData?.columns.map((column) => (
                        <SelectItem key={column.name} value={column.name}>
                          {column.name} ({column.type})
                        </SelectItem>
                      )) || []
                    );
                  })()}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label className="text-sm font-medium mb-2 block">
                Task Description
              </Label>
              <Input
                value={newTaskDescription}
                onChange={(e) => setNewTaskDescription(e.target.value)}
                placeholder="Describe what this task will do..."
                className="text-sm"
              />
            </div>
          </div>
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setShowAddTaskDialog(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={addCustomCleaningTask}
              disabled={!newTaskColumn || !newTaskDescription}
            >
              Add Task
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default function WorkflowPage() {
  return (
    <Suspense
      fallback={
        <div className="h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-slate-600">Loading workflow...</p>
          </div>
        </div>
      }
    >
      <WorkflowContent />
    </Suspense>
  );
}
